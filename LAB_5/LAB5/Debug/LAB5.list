
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003590  08003590  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003590  08003590  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  080035f4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080035f4  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d90d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002059  00000000  00000000  0002d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  0002fa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a84  00000000  00000000  000307a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187de  00000000  00000000  0003122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff7f  00000000  00000000  00049a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d25d  00000000  00000000  00059989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ce0  00000000  00000000  000e6be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ea8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003518 	.word	0x08003518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003518 	.word	0x08003518

0800014c <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

	/* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000150:	f000 f944 	bl	80003dc <MX_GPIO_Init>
	  MX_ADC1_Init();
 8000154:	f000 f88e 	bl	8000274 <MX_ADC1_Init>
	  MX_USART2_UART_Init();
 8000158:	f000 f916 	bl	8000388 <MX_USART2_UART_Init>
	  MX_TIM2_Init();
 800015c:	f000 f8c8 	bl	80002f0 <MX_TIM2_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start_IT(&htim2);
 8000160:	4815      	ldr	r0, [pc, #84]	; (80001b8 <main+0x6c>)
 8000162:	f001 fb31 	bl	80017c8 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8000166:	2201      	movs	r2, #1
 8000168:	4914      	ldr	r1, [pc, #80]	; (80001bc <main+0x70>)
 800016a:	4815      	ldr	r0, [pc, #84]	; (80001c0 <main+0x74>)
 800016c:	f001 ff93 	bl	8002096 <HAL_UART_Receive_IT>
	  HAL_ADC_Start(&hadc1);
 8000170:	4814      	ldr	r0, [pc, #80]	; (80001c4 <main+0x78>)
 8000172:	f000 fd47 	bl	8000c04 <HAL_ADC_Start>

	  setTimer1(50);
 8000176:	2032      	movs	r0, #50	; 0x32
 8000178:	f000 fa92 	bl	80006a0 <setTimer1>
	  parser_status = INIT;
 800017c:	4b12      	ldr	r3, [pc, #72]	; (80001c8 <main+0x7c>)
 800017e:	2201      	movs	r2, #1
 8000180:	601a      	str	r2, [r3, #0]
	  uart_status = WAIT;
 8000182:	4b12      	ldr	r3, [pc, #72]	; (80001cc <main+0x80>)
 8000184:	2203      	movs	r2, #3
 8000186:	601a      	str	r2, [r3, #0]

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  if(timer1_flag == 1)
 8000188:	4b11      	ldr	r3, [pc, #68]	; (80001d0 <main+0x84>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d106      	bne.n	800019e <main+0x52>
		  {
			  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 8000190:	2120      	movs	r1, #32
 8000192:	4810      	ldr	r0, [pc, #64]	; (80001d4 <main+0x88>)
 8000194:	f001 fa7c 	bl	8001690 <HAL_GPIO_TogglePin>
			  setTimer1(50);
 8000198:	2032      	movs	r0, #50	; 0x32
 800019a:	f000 fa81 	bl	80006a0 <setTimer1>
		  }
		  if(buffer_flag == 1)
 800019e:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <main+0x8c>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d104      	bne.n	80001b0 <main+0x64>
		  {
			  command_parser_fsm();
 80001a6:	f000 fb43 	bl	8000830 <command_parser_fsm>
			  buffer_flag=0;
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <main+0x8c>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	701a      	strb	r2, [r3, #0]
		  }
		  uart_communication_fsm();
 80001b0:	f000 fb82 	bl	80008b8 <uart_communication_fsm>
		  if(timer1_flag == 1)
 80001b4:	e7e8      	b.n	8000188 <main+0x3c>
 80001b6:	bf00      	nop
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	2000016f 	.word	0x2000016f
 80001c0:	200000f0 	.word	0x200000f0
 80001c4:	20000078 	.word	0x20000078
 80001c8:	20000190 	.word	0x20000190
 80001cc:	20000194 	.word	0x20000194
 80001d0:	20000144 	.word	0x20000144
 80001d4:	40010800 	.word	0x40010800
 80001d8:	2000018f 	.word	0x2000018f

080001dc <HAL_UART_RxCpltCallback>:
}

/**
  * @brief Callback UART khi nhận dữ liệu
  */
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 if(huart -> Instance == USART2 ){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a14      	ldr	r2, [pc, #80]	; (800023c <HAL_UART_RxCpltCallback+0x60>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d122      	bne.n	8000234 <HAL_UART_RxCpltCallback+0x58>
	 buffer[index_buffer] = temp;
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <HAL_UART_RxCpltCallback+0x64>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <HAL_UART_RxCpltCallback+0x68>)
 80001f6:	7819      	ldrb	r1, [r3, #0]
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <HAL_UART_RxCpltCallback+0x6c>)
 80001fa:	5499      	strb	r1, [r3, r2]
	 index_buffer++;
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <HAL_UART_RxCpltCallback+0x64>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <HAL_UART_RxCpltCallback+0x64>)
 8000206:	701a      	strb	r2, [r3, #0]
	 if( index_buffer == 30) index_buffer = 0;
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <HAL_UART_RxCpltCallback+0x64>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b1e      	cmp	r3, #30
 800020e:	d102      	bne.n	8000216 <HAL_UART_RxCpltCallback+0x3a>
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <HAL_UART_RxCpltCallback+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]

	 buffer_flag = 1;
 8000216:	4b0d      	ldr	r3, [pc, #52]	; (800024c <HAL_UART_RxCpltCallback+0x70>)
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Transmit(&huart2, &temp, 1, 1000);
 800021c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4908      	ldr	r1, [pc, #32]	; (8000244 <HAL_UART_RxCpltCallback+0x68>)
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <HAL_UART_RxCpltCallback+0x74>)
 8000226:	f001 feab 	bl	8001f80 <HAL_UART_Transmit>
	 HAL_UART_Receive_IT (&huart2 , &temp , 1);
 800022a:	2201      	movs	r2, #1
 800022c:	4905      	ldr	r1, [pc, #20]	; (8000244 <HAL_UART_RxCpltCallback+0x68>)
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <HAL_UART_RxCpltCallback+0x74>)
 8000230:	f001 ff31 	bl	8002096 <HAL_UART_Receive_IT>
 }
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40004400 	.word	0x40004400
 8000240:	2000018e 	.word	0x2000018e
 8000244:	2000016f 	.word	0x2000016f
 8000248:	20000170 	.word	0x20000170
 800024c:	2000018f 	.word	0x2000018f
 8000250:	200000f0 	.word	0x200000f0

08000254 <HAL_TIM_PeriodElapsedCallback>:


/**
  * @brief Callback Timer ngắt định kỳ
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000264:	d101      	bne.n	800026a <HAL_TIM_PeriodElapsedCallback+0x16>
        timerRun(); // Gọi hàm xử lý timer
 8000266:	f000 fa43 	bl	80006f0 <timerRun>
    }
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <MX_ADC1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000292:	2201      	movs	r2, #1
 8000294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_ADC1_Init+0x74>)
 800029e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 fbcf 	bl	8000a54 <HAL_ADC_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f8c0 	bl	8000440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fd51 	bl	8000d78 <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f8b0 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000078 	.word	0x20000078
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <MX_TIM2_Init+0x94>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_TIM2_Init+0x94>)
 8000316:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800031a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <MX_TIM2_Init+0x94>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_TIM2_Init+0x94>)
 8000324:	2209      	movs	r2, #9
 8000326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <MX_TIM2_Init+0x94>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_TIM2_Init+0x94>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000334:	4813      	ldr	r0, [pc, #76]	; (8000384 <MX_TIM2_Init+0x94>)
 8000336:	f001 f9f7 	bl	8001728 <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000340:	f000 f87e 	bl	8000440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	4619      	mov	r1, r3
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <MX_TIM2_Init+0x94>)
 8000352:	f001 fb75 	bl	8001a40 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800035c:	f000 f870 	bl	8000440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_TIM2_Init+0x94>)
 800036e:	f001 fd4d 	bl	8001e0c <HAL_TIMEx_MasterConfigSynchronization>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000378:	f000 f862 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200000a8 	.word	0x200000a8

08000388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <MX_USART2_UART_Init+0x50>)
 8000390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 8000394:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 80003ae:	220c      	movs	r2, #12
 80003b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_USART2_UART_Init+0x4c>)
 80003c0:	f001 fd8e 	bl	8001ee0 <HAL_UART_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ca:	f000 f839 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200000f0 	.word	0x200000f0
 80003d8:	40004400 	.word	0x40004400

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_GPIO_Init+0x5c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a10      	ldr	r2, [pc, #64]	; (8000438 <MX_GPIO_Init+0x5c>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_GPIO_Init+0x5c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2120      	movs	r1, #32
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <MX_GPIO_Init+0x60>)
 800040e:	f001 f927 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000412:	2320      	movs	r3, #32
 8000414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_GPIO_Init+0x60>)
 800042a:	f000 ff9d 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_ADC_MspInit+0x6c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d121      	bne.n	80004b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <HAL_ADC_MspInit+0x70>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a12      	ldr	r2, [pc, #72]	; (80004bc <HAL_ADC_MspInit+0x70>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <HAL_ADC_MspInit+0x70>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <HAL_ADC_MspInit+0x70>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <HAL_ADC_MspInit+0x70>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_ADC_MspInit+0x70>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2301      	movs	r3, #1
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <HAL_ADC_MspInit+0x74>)
 80004ac:	f000 ff5c 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40012400 	.word	0x40012400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004d4:	d113      	bne.n	80004fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_TIM_Base_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <HAL_TIM_Base_MspInit+0x44>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_TIM_Base_MspInit+0x44>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	201c      	movs	r0, #28
 80004f4:	f000 fe5a 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004f8:	201c      	movs	r0, #28
 80004fa:	f000 fe73 	bl	80011e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <HAL_UART_MspInit+0x98>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d137      	bne.n	800059c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <HAL_UART_MspInit+0x9c>)
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <HAL_UART_MspInit+0x9c>)
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000536:	61d3      	str	r3, [r2, #28]
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_UART_MspInit+0x9c>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_UART_MspInit+0x9c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <HAL_UART_MspInit+0x9c>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_UART_MspInit+0x9c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800055c:	2304      	movs	r3, #4
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	480f      	ldr	r0, [pc, #60]	; (80005ac <HAL_UART_MspInit+0xa0>)
 8000570:	f000 fefa 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000574:	2308      	movs	r3, #8
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <HAL_UART_MspInit+0xa0>)
 8000588:	f000 feee 	bl	8001368 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2100      	movs	r1, #0
 8000590:	2026      	movs	r0, #38	; 0x26
 8000592:	f000 fe0b 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000596:	2026      	movs	r0, #38	; 0x26
 8000598:	f000 fe24 	bl	80011e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f6:	f000 fa11 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <TIM2_IRQHandler+0x10>)
 8000606:	f001 f92b 	bl	8001860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000a8 	.word	0x200000a8

08000614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <USART2_IRQHandler+0x10>)
 800061a:	f001 fd61 	bl	80020e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000f0 	.word	0x200000f0

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f002 fad4 	bl	8002c04 <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20002800 	.word	0x20002800
 8000688:	00000400 	.word	0x00000400
 800068c:	20000138 	.word	0x20000138
 8000690:	20000308 	.word	0x20000308

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <setTimer1>:
int timer1_counter = 0;
int timer2_counter = 0;
int timer1_flag = 0;
int timer2_flag = 0;

void setTimer1(int duration){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80006a8:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <setTimer1+0x20>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <setTimer1+0x24>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000013c 	.word	0x2000013c
 80006c4:	20000144 	.word	0x20000144

080006c8 <setTimer2>:

void setTimer2(int duration){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <setTimer2+0x20>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <setTimer2+0x24>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000140 	.word	0x20000140
 80006ec:	20000148 	.word	0x20000148

080006f0 <timerRun>:
	timer1_flag = 0;

	timer2_counter = 0;
	timer2_flag = 0;
}
void timerRun(){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <timerRun+0x4c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd0b      	ble.n	8000714 <timerRun+0x24>
		timer1_counter--;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <timerRun+0x4c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3b01      	subs	r3, #1
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <timerRun+0x4c>)
 8000704:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <timerRun+0x4c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	dc02      	bgt.n	8000714 <timerRun+0x24>
			timer1_flag = 1;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <timerRun+0x50>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <timerRun+0x54>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	dd0b      	ble.n	8000734 <timerRun+0x44>
		timer2_counter--;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <timerRun+0x54>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <timerRun+0x54>)
 8000724:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <timerRun+0x54>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	dc02      	bgt.n	8000734 <timerRun+0x44>
			timer2_flag = 1;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <timerRun+0x58>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	2000013c 	.word	0x2000013c
 8000740:	20000144 	.word	0x20000144
 8000744:	20000140 	.word	0x20000140
 8000748:	20000148 	.word	0x20000148

0800074c <clean_content>:
int RST_flag = 0;


char str[MAX_BUFFER_SIZE]={0};

void clean_content(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	memset(text, 0, sizeof(text));
 8000750:	221e      	movs	r2, #30
 8000752:	2100      	movs	r1, #0
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <clean_content+0x14>)
 8000756:	f002 fa4d 	bl	8002bf4 <memset>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000150 	.word	0x20000150

08000764 <check_content>:

void check_content(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if(text[0]=='R' && text[1]=='S' && text[2]=='T' && text[3] == '#'){ // If !RST# => flag on
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <check_content+0xb4>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b52      	cmp	r3, #82	; 0x52
 800076e:	d111      	bne.n	8000794 <check_content+0x30>
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <check_content+0xb4>)
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	2b53      	cmp	r3, #83	; 0x53
 8000776:	d10d      	bne.n	8000794 <check_content+0x30>
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <check_content+0xb4>)
 800077a:	789b      	ldrb	r3, [r3, #2]
 800077c:	2b54      	cmp	r3, #84	; 0x54
 800077e:	d109      	bne.n	8000794 <check_content+0x30>
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <check_content+0xb4>)
 8000782:	78db      	ldrb	r3, [r3, #3]
 8000784:	2b23      	cmp	r3, #35	; 0x23
 8000786:	d105      	bne.n	8000794 <check_content+0x30>
		RST_flag=1;
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <check_content+0xb8>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
		clean_content();
 800078e:	f7ff ffdd 	bl	800074c <clean_content>
 8000792:	e03e      	b.n	8000812 <check_content+0xae>
	}
	else if(text[0]=='O' && text[1]=='K' && text[2]=='#' && RST_flag==1){   // If !OK# => end
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <check_content+0xb4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b4f      	cmp	r3, #79	; 0x4f
 800079a:	d112      	bne.n	80007c2 <check_content+0x5e>
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <check_content+0xb4>)
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	2b4b      	cmp	r3, #75	; 0x4b
 80007a2:	d10e      	bne.n	80007c2 <check_content+0x5e>
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <check_content+0xb4>)
 80007a6:	789b      	ldrb	r3, [r3, #2]
 80007a8:	2b23      	cmp	r3, #35	; 0x23
 80007aa:	d10a      	bne.n	80007c2 <check_content+0x5e>
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <check_content+0xb8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d106      	bne.n	80007c2 <check_content+0x5e>
		uart_status=END;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <check_content+0xbc>)
 80007b6:	2205      	movs	r2, #5
 80007b8:	601a      	str	r2, [r3, #0]
		RST_flag=0;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <check_content+0xb8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	e027      	b.n	8000812 <check_content+0xae>
	}
	else if((text[0]!='R' || text[1]!='S' || text[2]!='T' || text[3] != '#') && RST_flag==0){ // Wrong syntax content
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <check_content+0xb4>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b52      	cmp	r3, #82	; 0x52
 80007c8:	d10b      	bne.n	80007e2 <check_content+0x7e>
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <check_content+0xb4>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	2b53      	cmp	r3, #83	; 0x53
 80007d0:	d107      	bne.n	80007e2 <check_content+0x7e>
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <check_content+0xb4>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	2b54      	cmp	r3, #84	; 0x54
 80007d8:	d103      	bne.n	80007e2 <check_content+0x7e>
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <check_content+0xb4>)
 80007dc:	78db      	ldrb	r3, [r3, #3]
 80007de:	2b23      	cmp	r3, #35	; 0x23
 80007e0:	d013      	beq.n	800080a <check_content+0xa6>
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <check_content+0xb8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10f      	bne.n	800080a <check_content+0xa6>
		uart_status=END;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <check_content+0xbc>)
 80007ec:	2205      	movs	r2, #5
 80007ee:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "Wrong syntax \n"), 1000);
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <check_content+0xc0>)
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <check_content+0xc4>)
 80007f4:	f002 f9de 	bl	8002bb4 <siprintf>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000800:	4909      	ldr	r1, [pc, #36]	; (8000828 <check_content+0xc4>)
 8000802:	480a      	ldr	r0, [pc, #40]	; (800082c <check_content+0xc8>)
 8000804:	f001 fbbc 	bl	8001f80 <HAL_UART_Transmit>
 8000808:	e003      	b.n	8000812 <check_content+0xae>
	}
	else{  // The last case user have not enter "OK"
		uart_status=SENDING;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <check_content+0xbc>)
 800080c:	2204      	movs	r2, #4
 800080e:	601a      	str	r2, [r3, #0]
	}
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000150 	.word	0x20000150
 800081c:	20000198 	.word	0x20000198
 8000820:	20000194 	.word	0x20000194
 8000824:	08003530 	.word	0x08003530
 8000828:	2000019c 	.word	0x2000019c
 800082c:	200000f0 	.word	0x200000f0

08000830 <command_parser_fsm>:
void command_parser_fsm(){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	switch(parser_status){
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <command_parser_fsm+0x78>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d002      	beq.n	8000842 <command_parser_fsm+0x12>
 800083c:	2b02      	cmp	r3, #2
 800083e:	d00b      	beq.n	8000858 <command_parser_fsm+0x28>
				index_text = 0;
			}
		}
		break;
	default:
		break;
 8000840:	e030      	b.n	80008a4 <command_parser_fsm+0x74>
		if(temp == '!'){ // If the first is !, it will move to the parser to add the char into buffer, else, do not thing
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <command_parser_fsm+0x7c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b21      	cmp	r3, #33	; 0x21
 8000848:	d129      	bne.n	800089e <command_parser_fsm+0x6e>
			parser_status=PARSER;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <command_parser_fsm+0x78>)
 800084c:	2202      	movs	r2, #2
 800084e:	601a      	str	r2, [r3, #0]
			index_text = 0;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <command_parser_fsm+0x80>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e022      	b.n	800089e <command_parser_fsm+0x6e>
		if(temp == '\r'){
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <command_parser_fsm+0x7c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b0d      	cmp	r3, #13
 800085e:	d105      	bne.n	800086c <command_parser_fsm+0x3c>
			check_content();
 8000860:	f7ff ff80 	bl	8000764 <check_content>
			parser_status=INIT;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <command_parser_fsm+0x78>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]
		break;
 800086a:	e01a      	b.n	80008a2 <command_parser_fsm+0x72>
		else if(temp != '\r'){
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <command_parser_fsm+0x7c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b0d      	cmp	r3, #13
 8000872:	d016      	beq.n	80008a2 <command_parser_fsm+0x72>
			text[index_text] = temp;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <command_parser_fsm+0x80>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <command_parser_fsm+0x7c>)
 800087c:	7819      	ldrb	r1, [r3, #0]
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <command_parser_fsm+0x84>)
 8000880:	5499      	strb	r1, [r3, r2]
			index_text++;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <command_parser_fsm+0x80>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <command_parser_fsm+0x80>)
 800088c:	701a      	strb	r2, [r3, #0]
			if(index_text == MAX_BUFFER_SIZE){
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <command_parser_fsm+0x80>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b1e      	cmp	r3, #30
 8000894:	d105      	bne.n	80008a2 <command_parser_fsm+0x72>
				index_text = 0;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <command_parser_fsm+0x80>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		break;
 800089c:	e001      	b.n	80008a2 <command_parser_fsm+0x72>
		break;
 800089e:	bf00      	nop
 80008a0:	e000      	b.n	80008a4 <command_parser_fsm+0x74>
		break;
 80008a2:	bf00      	nop
	}
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000190 	.word	0x20000190
 80008ac:	2000016f 	.word	0x2000016f
 80008b0:	2000016e 	.word	0x2000016e
 80008b4:	20000150 	.word	0x20000150

080008b8 <uart_communication_fsm>:

void uart_communication_fsm(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	switch(uart_status){
 80008bc:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <uart_communication_fsm+0xec>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d053      	beq.n	800096c <uart_communication_fsm+0xb4>
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	dc66      	bgt.n	8000996 <uart_communication_fsm+0xde>
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d002      	beq.n	80008d2 <uart_communication_fsm+0x1a>
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d00b      	beq.n	80008e8 <uart_communication_fsm+0x30>
		uart_status = WAIT;
		HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "End. \n"), 1000);
		check_first = 1;
		break;
	default:
		break;
 80008d0:	e061      	b.n	8000996 <uart_communication_fsm+0xde>
		if(RST_flag==1){
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <uart_communication_fsm+0xf0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d15f      	bne.n	800099a <uart_communication_fsm+0xe2>
			uart_status=SENDING;
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <uart_communication_fsm+0xec>)
 80008dc:	2204      	movs	r2, #4
 80008de:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 80008e0:	20c8      	movs	r0, #200	; 0xc8
 80008e2:	f7ff fef1 	bl	80006c8 <setTimer2>
		break;
 80008e6:	e058      	b.n	800099a <uart_communication_fsm+0xe2>
		if (timer2_flag == 1) {
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <uart_communication_fsm+0xf4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d156      	bne.n	800099e <uart_communication_fsm+0xe6>
			if(check_first == 1)
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <uart_communication_fsm+0xf8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d121      	bne.n	800093c <uart_communication_fsm+0x84>
				ADC_value= HAL_ADC_GetValue(&hadc1);
 80008f8:	482e      	ldr	r0, [pc, #184]	; (80009b4 <uart_communication_fsm+0xfc>)
 80008fa:	f000 fa31 	bl	8000d60 <HAL_ADC_GetValue>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <uart_communication_fsm+0x100>)
 8000904:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!ADC=%d#\r\n", ADC_value), 1000);
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <uart_communication_fsm+0x100>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	492b      	ldr	r1, [pc, #172]	; (80009bc <uart_communication_fsm+0x104>)
 800090e:	482c      	ldr	r0, [pc, #176]	; (80009c0 <uart_communication_fsm+0x108>)
 8000910:	f002 f950 	bl	8002bb4 <siprintf>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091c:	4928      	ldr	r1, [pc, #160]	; (80009c0 <uart_communication_fsm+0x108>)
 800091e:	4829      	ldr	r0, [pc, #164]	; (80009c4 <uart_communication_fsm+0x10c>)
 8000920:	f001 fb2e 	bl	8001f80 <HAL_UART_Transmit>
				old_value = ADC_value;
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <uart_communication_fsm+0x100>)
 8000926:	881a      	ldrh	r2, [r3, #0]
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <uart_communication_fsm+0x110>)
 800092a:	801a      	strh	r2, [r3, #0]
				check_first = 0;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <uart_communication_fsm+0xf8>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
				setTimer2(300);
 8000932:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000936:	f7ff fec7 	bl	80006c8 <setTimer2>
		break;
 800093a:	e030      	b.n	800099e <uart_communication_fsm+0xe6>
			else if(check_first == 0)
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <uart_communication_fsm+0xf8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d12c      	bne.n	800099e <uart_communication_fsm+0xe6>
				HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!ADC=%d#\r\n", old_value), 1000);
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <uart_communication_fsm+0x110>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	491c      	ldr	r1, [pc, #112]	; (80009bc <uart_communication_fsm+0x104>)
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <uart_communication_fsm+0x108>)
 800094e:	f002 f931 	bl	8002bb4 <siprintf>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	4919      	ldr	r1, [pc, #100]	; (80009c0 <uart_communication_fsm+0x108>)
 800095c:	4819      	ldr	r0, [pc, #100]	; (80009c4 <uart_communication_fsm+0x10c>)
 800095e:	f001 fb0f 	bl	8001f80 <HAL_UART_Transmit>
				setTimer2(300);
 8000962:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000966:	f7ff feaf 	bl	80006c8 <setTimer2>
		break;
 800096a:	e018      	b.n	800099e <uart_communication_fsm+0xe6>
		clean_content();
 800096c:	f7ff feee 	bl	800074c <clean_content>
		uart_status = WAIT;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <uart_communication_fsm+0xec>)
 8000972:	2203      	movs	r2, #3
 8000974:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "End. \n"), 1000);
 8000976:	4915      	ldr	r1, [pc, #84]	; (80009cc <uart_communication_fsm+0x114>)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <uart_communication_fsm+0x108>)
 800097a:	f002 f91b 	bl	8002bb4 <siprintf>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	490e      	ldr	r1, [pc, #56]	; (80009c0 <uart_communication_fsm+0x108>)
 8000988:	480e      	ldr	r0, [pc, #56]	; (80009c4 <uart_communication_fsm+0x10c>)
 800098a:	f001 faf9 	bl	8001f80 <HAL_UART_Transmit>
		check_first = 1;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <uart_communication_fsm+0xf8>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
		break;
 8000994:	e004      	b.n	80009a0 <uart_communication_fsm+0xe8>
		break;
 8000996:	bf00      	nop
 8000998:	e002      	b.n	80009a0 <uart_communication_fsm+0xe8>
		break;
 800099a:	bf00      	nop
 800099c:	e000      	b.n	80009a0 <uart_communication_fsm+0xe8>
		break;
 800099e:	bf00      	nop
	}
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000194 	.word	0x20000194
 80009a8:	20000198 	.word	0x20000198
 80009ac:	20000148 	.word	0x20000148
 80009b0:	20000004 	.word	0x20000004
 80009b4:	20000078 	.word	0x20000078
 80009b8:	2000014c 	.word	0x2000014c
 80009bc:	08003540 	.word	0x08003540
 80009c0:	2000019c 	.word	0x2000019c
 80009c4:	200000f0 	.word	0x200000f0
 80009c8:	2000014e 	.word	0x2000014e
 80009cc:	0800354c 	.word	0x0800354c

080009d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d0:	f7ff fe60 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ec:	4c09      	ldr	r4, [pc, #36]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 f909 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fba5 	bl	800014c <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a0c:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8000a10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a14:	20000308 	.word	0x20000308

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>
	...

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	200001bc 	.word	0x200001bc

08000a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	200001bc 	.word	0x200001bc

08000a54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0be      	b.n	8000bf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fcda 	bl	800044c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 fabf 	bl	800101c <ADC_ConversionStop_Disable>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8099 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8095 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	f043 0202 	orr.w	r2, r3, #2
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7b1b      	ldrb	r3, [r3, #12]
 8000ada:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000adc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aec:	d003      	beq.n	8000af6 <HAL_ADC_Init+0xa2>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0xa8>
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	e000      	b.n	8000afe <HAL_ADC_Init+0xaa>
 8000afc:	2300      	movs	r3, #0
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7d1b      	ldrb	r3, [r3, #20]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d119      	bne.n	8000b40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7b1b      	ldrb	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	035a      	lsls	r2, r3, #13
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	e00b      	b.n	8000b40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f043 0220 	orr.w	r2, r3, #32
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_ADC_Init+0x1a8>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0x126>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_ADC_Init+0x1ac>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbe:	e018      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f023 0312 	bic.w	r3, r3, #18
 8000bc8:	f043 0210 	orr.w	r2, r3, #16
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be0:	e007      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f043 0210 	orr.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	ffe1f7fd 	.word	0xffe1f7fd
 8000c00:	ff1f0efe 	.word	0xff1f0efe

08000c04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Start+0x1a>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e098      	b.n	8000d50 <HAL_ADC_Start+0x14c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f99e 	bl	8000f68 <ADC_Enable>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8087 	bne.w	8000d46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c40:	f023 0301 	bic.w	r3, r3, #1
 8000c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a41      	ldr	r2, [pc, #260]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <HAL_ADC_Start+0x5e>
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d115      	bne.n	8000c8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d026      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8c:	e01d      	b.n	8000cca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d004      	beq.n	8000cae <HAL_ADC_Start+0xaa>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_ADC_Start+0xc6>
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f023 0206 	bic.w	r2, r3, #6
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce2:	e002      	b.n	8000cea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f06f 0202 	mvn.w	r2, #2
 8000cfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d0a:	d113      	bne.n	8000d34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d10:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d105      	bne.n	8000d22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d108      	bne.n	8000d34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e00c      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e003      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40012800 	.word	0x40012800
 8000d5c:	40012400 	.word	0x40012400

08000d60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x20>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e0dc      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x1da>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b06      	cmp	r3, #6
 8000da6:	d81c      	bhi.n	8000de2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	3b05      	subs	r3, #5
 8000dba:	221f      	movs	r2, #31
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b05      	subs	r3, #5
 8000dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	e03c      	b.n	8000e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b0c      	cmp	r3, #12
 8000de8:	d81c      	bhi.n	8000e24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b23      	subs	r3, #35	; 0x23
 8000dfc:	221f      	movs	r2, #31
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4019      	ands	r1, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	3b23      	subs	r3, #35	; 0x23
 8000e16:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e01b      	b.n	8000e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	3b41      	subs	r3, #65	; 0x41
 8000e36:	221f      	movs	r2, #31
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4019      	ands	r1, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b41      	subs	r3, #65	; 0x41
 8000e50:	fa00 f203 	lsl.w	r2, r0, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d91c      	bls.n	8000e9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68d9      	ldr	r1, [r3, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	3b1e      	subs	r3, #30
 8000e76:	2207      	movs	r2, #7
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4019      	ands	r1, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6898      	ldr	r0, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b1e      	subs	r3, #30
 8000e90:	fa00 f203 	lsl.w	r2, r0, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e019      	b.n	8000ed2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6919      	ldr	r1, [r3, #16]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	2207      	movs	r2, #7
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4019      	ands	r1, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6898      	ldr	r0, [r3, #8]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b10      	cmp	r3, #16
 8000ed8:	d003      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ede:	2b11      	cmp	r3, #17
 8000ee0:	d132      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d125      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d126      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b10      	cmp	r3, #16
 8000f10:	d11a      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	0c9a      	lsrs	r2, r3, #18
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f28:	e002      	b.n	8000f30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f9      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x1b2>
 8000f36:	e007      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f043 0220 	orr.w	r2, r3, #32
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40012400 	.word	0x40012400
 8000f60:	20000000 	.word	0x20000000
 8000f64:	431bde83 	.word	0x431bde83

08000f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d040      	beq.n	8001008 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <ADC_Enable+0xac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <ADC_Enable+0xb0>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	0c9b      	lsrs	r3, r3, #18
 8000fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fa4:	e002      	b.n	8000fac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fb2:	f7ff fd45 	bl	8000a40 <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fb8:	e01f      	b.n	8000ffa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fba:	f7ff fd41 	bl	8000a40 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d918      	bls.n	8000ffa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d011      	beq.n	8000ffa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f043 0210 	orr.w	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e007      	b.n	800100a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b01      	cmp	r3, #1
 8001006:	d1d8      	bne.n	8000fba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d12e      	bne.n	8001094 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001046:	f7ff fcfb 	bl	8000a40 <HAL_GetTick>
 800104a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800104c:	e01b      	b.n	8001086 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800104e:	f7ff fcf7 	bl	8000a40 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d914      	bls.n	8001086 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10d      	bne.n	8001086 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e007      	b.n	8001096 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d0dc      	beq.n	800104e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4906      	ldr	r1, [pc, #24]	; (80010f0 <__NVIC_EnableIRQ+0x34>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011be:	f7ff ff6f 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f7ff ffbd 	bl	8001148 <NVIC_EncodePriority>
 80011ce:	4602      	mov	r2, r0
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff8c 	bl	80010f4 <__NVIC_SetPriority>
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff62 	bl	80010bc <__NVIC_EnableIRQ>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d008      	beq.n	800122a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2204      	movs	r2, #4
 800121c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e020      	b.n	800126c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 020e 	bic.w	r2, r2, #14
 8001238:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
	...

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d005      	beq.n	800129c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2204      	movs	r2, #4
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e051      	b.n	8001340 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_DMA_Abort_IT+0xd4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d029      	beq.n	800131a <HAL_DMA_Abort_IT+0xa2>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a21      	ldr	r2, [pc, #132]	; (8001350 <HAL_DMA_Abort_IT+0xd8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d022      	beq.n	8001316 <HAL_DMA_Abort_IT+0x9e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_DMA_Abort_IT+0xdc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01a      	beq.n	8001310 <HAL_DMA_Abort_IT+0x98>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <HAL_DMA_Abort_IT+0xe0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d012      	beq.n	800130a <HAL_DMA_Abort_IT+0x92>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_DMA_Abort_IT+0xe4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00a      	beq.n	8001304 <HAL_DMA_Abort_IT+0x8c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_DMA_Abort_IT+0xe8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d102      	bne.n	80012fe <HAL_DMA_Abort_IT+0x86>
 80012f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012fc:	e00e      	b.n	800131c <HAL_DMA_Abort_IT+0xa4>
 80012fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001302:	e00b      	b.n	800131c <HAL_DMA_Abort_IT+0xa4>
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	e008      	b.n	800131c <HAL_DMA_Abort_IT+0xa4>
 800130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130e:	e005      	b.n	800131c <HAL_DMA_Abort_IT+0xa4>
 8001310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001314:	e002      	b.n	800131c <HAL_DMA_Abort_IT+0xa4>
 8001316:	2310      	movs	r3, #16
 8001318:	e000      	b.n	800131c <HAL_DMA_Abort_IT+0xa4>
 800131a:	2301      	movs	r3, #1
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_DMA_Abort_IT+0xec>)
 800131e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
    } 
  }
  return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020008 	.word	0x40020008
 8001350:	4002001c 	.word	0x4002001c
 8001354:	40020030 	.word	0x40020030
 8001358:	40020044 	.word	0x40020044
 800135c:	40020058 	.word	0x40020058
 8001360:	4002006c 	.word	0x4002006c
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	e161      	b.n	8001640 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800137c:	2201      	movs	r2, #1
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8150 	bne.w	800163a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a97      	ldr	r2, [pc, #604]	; (80015fc <HAL_GPIO_Init+0x294>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d05e      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013a4:	4a95      	ldr	r2, [pc, #596]	; (80015fc <HAL_GPIO_Init+0x294>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d875      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013aa:	4a95      	ldr	r2, [pc, #596]	; (8001600 <HAL_GPIO_Init+0x298>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d058      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013b0:	4a93      	ldr	r2, [pc, #588]	; (8001600 <HAL_GPIO_Init+0x298>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d86f      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013b6:	4a93      	ldr	r2, [pc, #588]	; (8001604 <HAL_GPIO_Init+0x29c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d052      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013bc:	4a91      	ldr	r2, [pc, #580]	; (8001604 <HAL_GPIO_Init+0x29c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d869      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013c2:	4a91      	ldr	r2, [pc, #580]	; (8001608 <HAL_GPIO_Init+0x2a0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d04c      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013c8:	4a8f      	ldr	r2, [pc, #572]	; (8001608 <HAL_GPIO_Init+0x2a0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d863      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013ce:	4a8f      	ldr	r2, [pc, #572]	; (800160c <HAL_GPIO_Init+0x2a4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d046      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013d4:	4a8d      	ldr	r2, [pc, #564]	; (800160c <HAL_GPIO_Init+0x2a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d85d      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d82a      	bhi.n	8001434 <HAL_GPIO_Init+0xcc>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d859      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013e2:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <HAL_GPIO_Init+0x80>)
 80013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e8:	08001463 	.word	0x08001463
 80013ec:	0800143d 	.word	0x0800143d
 80013f0:	0800144f 	.word	0x0800144f
 80013f4:	08001491 	.word	0x08001491
 80013f8:	08001497 	.word	0x08001497
 80013fc:	08001497 	.word	0x08001497
 8001400:	08001497 	.word	0x08001497
 8001404:	08001497 	.word	0x08001497
 8001408:	08001497 	.word	0x08001497
 800140c:	08001497 	.word	0x08001497
 8001410:	08001497 	.word	0x08001497
 8001414:	08001497 	.word	0x08001497
 8001418:	08001497 	.word	0x08001497
 800141c:	08001497 	.word	0x08001497
 8001420:	08001497 	.word	0x08001497
 8001424:	08001497 	.word	0x08001497
 8001428:	08001497 	.word	0x08001497
 800142c:	08001445 	.word	0x08001445
 8001430:	08001459 	.word	0x08001459
 8001434:	4a76      	ldr	r2, [pc, #472]	; (8001610 <HAL_GPIO_Init+0x2a8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143a:	e02c      	b.n	8001496 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e029      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	3304      	adds	r3, #4
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e024      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	3308      	adds	r3, #8
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e01f      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	330c      	adds	r3, #12
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e01a      	b.n	8001498 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146a:	2304      	movs	r3, #4
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e013      	b.n	8001498 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	611a      	str	r2, [r3, #16]
          break;
 8001482:	e009      	b.n	8001498 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001484:	2308      	movs	r3, #8
 8001486:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	615a      	str	r2, [r3, #20]
          break;
 800148e:	e003      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x130>
          break;
 8001496:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2bff      	cmp	r3, #255	; 0xff
 800149c:	d801      	bhi.n	80014a2 <HAL_GPIO_Init+0x13a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	e001      	b.n	80014a6 <HAL_GPIO_Init+0x13e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2bff      	cmp	r3, #255	; 0xff
 80014ac:	d802      	bhi.n	80014b4 <HAL_GPIO_Init+0x14c>
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x152>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3b08      	subs	r3, #8
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	210f      	movs	r1, #15
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	401a      	ands	r2, r3
 80014cc:	6a39      	ldr	r1, [r7, #32]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	431a      	orrs	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a9 	beq.w	800163a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x2ac>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2ac>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_GPIO_Init+0x2ac>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001500:	4a45      	ldr	r2, [pc, #276]	; (8001618 <HAL_GPIO_Init+0x2b0>)
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3d      	ldr	r2, [pc, #244]	; (800161c <HAL_GPIO_Init+0x2b4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00d      	beq.n	8001548 <HAL_GPIO_Init+0x1e0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a3c      	ldr	r2, [pc, #240]	; (8001620 <HAL_GPIO_Init+0x2b8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0x1dc>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_GPIO_Init+0x2bc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_GPIO_Init+0x1d8>
 800153c:	2302      	movs	r3, #2
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001540:	2303      	movs	r3, #3
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001548:	2300      	movs	r3, #0
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x2b0>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	492b      	ldr	r1, [pc, #172]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4927      	ldr	r1, [pc, #156]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 800158c:	4013      	ands	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	4921      	ldr	r1, [pc, #132]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491d      	ldr	r1, [pc, #116]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4917      	ldr	r1, [pc, #92]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4913      	ldr	r1, [pc, #76]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	490d      	ldr	r1, [pc, #52]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e01f      	b.n	800163a <HAL_GPIO_Init+0x2d2>
 80015fa:	bf00      	nop
 80015fc:	10320000 	.word	0x10320000
 8001600:	10310000 	.word	0x10310000
 8001604:	10220000 	.word	0x10220000
 8001608:	10210000 	.word	0x10210000
 800160c:	10120000 	.word	0x10120000
 8001610:	10110000 	.word	0x10110000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_GPIO_Init+0x2f4>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	43db      	mvns	r3, r3
 8001634:	4909      	ldr	r1, [pc, #36]	; (800165c <HAL_GPIO_Init+0x2f4>)
 8001636:	4013      	ands	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	3301      	adds	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f ae96 	bne.w	800137c <HAL_GPIO_Init+0x14>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	372c      	adds	r7, #44	; 0x2c
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43d9      	mvns	r1, r3
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	400b      	ands	r3, r1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	611a      	str	r2, [r3, #16]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016dc:	f7ff fff2 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	4903      	ldr	r1, [pc, #12]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	08003554 	.word	0x08003554

08001700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001704:	f7ff ffde 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0adb      	lsrs	r3, r3, #11
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4903      	ldr	r1, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	08003554 	.word	0x08003554

08001728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e041      	b.n	80017be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe feb8 	bl	80004c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f000 fa56 	bl	8001c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d001      	beq.n	80017e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e035      	b.n	800184c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <HAL_TIM_Base_Start_IT+0x90>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_TIM_Base_Start_IT+0x4e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180a:	d004      	beq.n	8001816 <HAL_TIM_Base_Start_IT+0x4e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_TIM_Base_Start_IT+0x94>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d111      	bne.n	800183a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b06      	cmp	r3, #6
 8001826:	d010      	beq.n	800184a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001838:	e007      	b.n	800184a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40012c00 	.word	0x40012c00
 800185c:	40000400 	.word	0x40000400

08001860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d020      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01b      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0202 	mvn.w	r2, #2
 8001894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f998 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 80018b0:	e005      	b.n	80018be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f98b 	bl	8001bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f99a 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d020      	beq.n	8001910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0204 	mvn.w	r2, #4
 80018e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2202      	movs	r2, #2
 80018e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f972 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 80018fc:	e005      	b.n	800190a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f965 	bl	8001bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f974 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d020      	beq.n	800195c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01b      	beq.n	800195c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0208 	mvn.w	r2, #8
 800192c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2204      	movs	r2, #4
 8001932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f94c 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8001948:	e005      	b.n	8001956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f93f 	bl	8001bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f94e 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d020      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0210 	mvn.w	r2, #16
 8001978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2208      	movs	r2, #8
 800197e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f926 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8001994:	e005      	b.n	80019a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f919 	bl	8001bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f928 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0201 	mvn.w	r2, #1
 80019c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fc44 	bl	8000254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00c      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fa6f 	bl	8001ece <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8f8 	bl	8001c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00c      	beq.n	8001a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0220 	mvn.w	r2, #32
 8001a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fa42 	bl	8001ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_TIM_ConfigClockSource+0x1c>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0b4      	b.n	8001bc6 <HAL_TIM_ConfigClockSource+0x186>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a94:	d03e      	beq.n	8001b14 <HAL_TIM_ConfigClockSource+0xd4>
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9a:	f200 8087 	bhi.w	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa2:	f000 8086 	beq.w	8001bb2 <HAL_TIM_ConfigClockSource+0x172>
 8001aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aaa:	d87f      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001aac:	2b70      	cmp	r3, #112	; 0x70
 8001aae:	d01a      	beq.n	8001ae6 <HAL_TIM_ConfigClockSource+0xa6>
 8001ab0:	2b70      	cmp	r3, #112	; 0x70
 8001ab2:	d87b      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001ab4:	2b60      	cmp	r3, #96	; 0x60
 8001ab6:	d050      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x11a>
 8001ab8:	2b60      	cmp	r3, #96	; 0x60
 8001aba:	d877      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001abc:	2b50      	cmp	r3, #80	; 0x50
 8001abe:	d03c      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0xfa>
 8001ac0:	2b50      	cmp	r3, #80	; 0x50
 8001ac2:	d873      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d058      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x13a>
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d86f      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001acc:	2b30      	cmp	r3, #48	; 0x30
 8001ace:	d064      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ad0:	2b30      	cmp	r3, #48	; 0x30
 8001ad2:	d86b      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d060      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d867      	bhi.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d05c      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d05a      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ae4:	e062      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001af6:	f000 f96a 	bl	8001dce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	609a      	str	r2, [r3, #8]
      break;
 8001b12:	e04f      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b24:	f000 f953 	bl	8001dce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b36:	609a      	str	r2, [r3, #8]
      break;
 8001b38:	e03c      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b46:	461a      	mov	r2, r3
 8001b48:	f000 f8ca 	bl	8001ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2150      	movs	r1, #80	; 0x50
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f921 	bl	8001d9a <TIM_ITRx_SetConfig>
      break;
 8001b58:	e02c      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b66:	461a      	mov	r2, r3
 8001b68:	f000 f8e8 	bl	8001d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2160      	movs	r1, #96	; 0x60
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f911 	bl	8001d9a <TIM_ITRx_SetConfig>
      break;
 8001b78:	e01c      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b86:	461a      	mov	r2, r3
 8001b88:	f000 f8aa 	bl	8001ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f901 	bl	8001d9a <TIM_ITRx_SetConfig>
      break;
 8001b98:	e00c      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f000 f8f8 	bl	8001d9a <TIM_ITRx_SetConfig>
      break;
 8001baa:	e003      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb0:	e000      	b.n	8001bb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <TIM_Base_SetConfig+0xc0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d007      	beq.n	8001c40 <TIM_Base_SetConfig+0x28>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c36:	d003      	beq.n	8001c40 <TIM_Base_SetConfig+0x28>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <TIM_Base_SetConfig+0xc4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d108      	bne.n	8001c52 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <TIM_Base_SetConfig+0xc0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <TIM_Base_SetConfig+0x52>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d003      	beq.n	8001c6a <TIM_Base_SetConfig+0x52>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <TIM_Base_SetConfig+0xc4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d108      	bne.n	8001c7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <TIM_Base_SetConfig+0xc0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f023 0201 	bic.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f023 0201 	bic.w	r2, r3, #1
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f023 030a 	bic.w	r3, r3, #10
 8001d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	621a      	str	r2, [r3, #32]
}
 8001d32:	bf00      	nop
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	f023 0210 	bic.w	r2, r3, #16
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	031b      	lsls	r3, r3, #12
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	621a      	str	r2, [r3, #32]
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f043 0307 	orr.w	r3, r3, #7
 8001dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b087      	sub	sp, #28
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	021a      	lsls	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	609a      	str	r2, [r3, #8]
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e041      	b.n	8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d004      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10c      	bne.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40012c00 	.word	0x40012c00
 8001eb8:	40000400 	.word	0x40000400

08001ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e042      	b.n	8001f78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fb00 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	; 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fdb7 	bl	8002a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d175      	bne.n	800208c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_UART_Transmit+0x2c>
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e06e      	b.n	800208e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2221      	movs	r2, #33	; 0x21
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fbe:	f7fe fd3f 	bl	8000a40 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd8:	d108      	bne.n	8001fec <HAL_UART_Transmit+0x6c>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d104      	bne.n	8001fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	e003      	b.n	8001ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ff4:	e02e      	b.n	8002054 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fb1c 	bl	800263e <UART_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03a      	b.n	800208e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800202c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	3302      	adds	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	e007      	b.n	8002046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1cb      	bne.n	8001ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2200      	movs	r2, #0
 8002066:	2140      	movs	r1, #64	; 0x40
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fae8 	bl	800263e <UART_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e006      	b.n	800208e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d112      	bne.n	80020d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_UART_Receive_IT+0x26>
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e00b      	b.n	80020d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fb0f 	bl	80026f0 <UART_Start_Receive_IT>
 80020d2:	4603      	mov	r3, r0
 80020d4:	e000      	b.n	80020d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0ba      	sub	sp, #232	; 0xe8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800211e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_UART_IRQHandler+0x66>
 8002132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fbec 	bl	800291c <UART_Receive_IT>
      return;
 8002144:	e25b      	b.n	80025fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80de 	beq.w	800230c <HAL_UART_IRQHandler+0x22c>
 8002150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800215c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002160:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80d1 	beq.w	800230c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800216a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_UART_IRQHandler+0xae>
 8002176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_UART_IRQHandler+0xd2>
 800219a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_UART_IRQHandler+0xf6>
 80021be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f043 0204 	orr.w	r2, r3, #4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <HAL_UART_IRQHandler+0x126>
 80021e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f043 0208 	orr.w	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 81f2 	beq.w	80025f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_UART_IRQHandler+0x14e>
 800221c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fb77 	bl	800291c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_UART_IRQHandler+0x17a>
 8002252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04f      	beq.n	80022fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fa81 	bl	8002762 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d041      	beq.n	80022f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3314      	adds	r3, #20
 8002274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800227c:	e853 3f00 	ldrex	r3, [r3]
 8002280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800228c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3314      	adds	r3, #20
 8002296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800229a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800229e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022aa:	e841 2300 	strex	r3, r2, [r1]
 80022ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1d9      	bne.n	800226e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d013      	beq.n	80022ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_UART_IRQHandler+0x3e0>)
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe ffd2 	bl	8001278 <HAL_DMA_Abort_IT>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022e4:	4610      	mov	r0, r2
 80022e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e8:	e00e      	b.n	8002308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f993 	bl	8002616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f0:	e00a      	b.n	8002308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f98f 	bl	8002616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f8:	e006      	b.n	8002308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f98b 	bl	8002616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002306:	e175      	b.n	80025f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002308:	bf00      	nop
    return;
 800230a:	e173      	b.n	80025f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 814f 	bne.w	80025b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8148 	beq.w	80025b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8141 	beq.w	80025b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80b6 	beq.w	80024c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8145 	beq.w	80025f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002376:	429a      	cmp	r2, r3
 8002378:	f080 813e 	bcs.w	80025f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002382:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b20      	cmp	r3, #32
 800238c:	f000 8088 	beq.w	80024a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800239e:	e853 3f00 	ldrex	r3, [r3]
 80023a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80023bc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023cc:	e841 2300 	strex	r3, r2, [r1]
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1d9      	bne.n	8002390 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3314      	adds	r3, #20
 80023e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e6:	e853 3f00 	ldrex	r3, [r3]
 80023ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80023ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3314      	adds	r3, #20
 80023fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002400:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002404:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002406:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002408:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800240c:	e841 2300 	strex	r3, r2, [r1]
 8002410:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e1      	bne.n	80023dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3314      	adds	r3, #20
 800241e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002422:	e853 3f00 	ldrex	r3, [r3]
 8002426:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800242e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3314      	adds	r3, #20
 8002438:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800243c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800243e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002440:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002442:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002444:	e841 2300 	strex	r3, r2, [r1]
 8002448:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800244a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e3      	bne.n	8002418 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002470:	f023 0310 	bic.w	r3, r3, #16
 8002474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002482:	65ba      	str	r2, [r7, #88]	; 0x58
 8002484:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e3      	bne.n	800245e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe feb0 	bl	8001200 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f8b6 	bl	8002628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024bc:	e09c      	b.n	80025f8 <HAL_UART_IRQHandler+0x518>
 80024be:	bf00      	nop
 80024c0:	08002827 	.word	0x08002827
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 808e 	beq.w	80025fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80024e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8089 	beq.w	80025fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	330c      	adds	r3, #12
 800250a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800250e:	647a      	str	r2, [r7, #68]	; 0x44
 8002510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002516:	e841 2300 	strex	r3, r2, [r1]
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800251c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e3      	bne.n	80024ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	623b      	str	r3, [r7, #32]
   return(result);
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002546:	633a      	str	r2, [r7, #48]	; 0x30
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800254c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254e:	e841 2300 	strex	r3, r2, [r1]
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e3      	bne.n	8002522 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	60fb      	str	r3, [r7, #12]
   return(result);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800258c:	61fa      	str	r2, [r7, #28]
 800258e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	69b9      	ldr	r1, [r7, #24]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	617b      	str	r3, [r7, #20]
   return(result);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e3      	bne.n	8002568 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f83b 	bl	8002628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025b2:	e023      	b.n	80025fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_UART_IRQHandler+0x4f4>
 80025c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f93e 	bl	800284e <UART_Transmit_IT>
    return;
 80025d2:	e014      	b.n	80025fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <HAL_UART_IRQHandler+0x51e>
 80025e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f97d 	bl	80028ec <UART_EndTransmit_IT>
    return;
 80025f2:	e004      	b.n	80025fe <HAL_UART_IRQHandler+0x51e>
    return;
 80025f4:	bf00      	nop
 80025f6:	e002      	b.n	80025fe <HAL_UART_IRQHandler+0x51e>
      return;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <HAL_UART_IRQHandler+0x51e>
      return;
 80025fc:	bf00      	nop
  }
}
 80025fe:	37e8      	adds	r7, #232	; 0xe8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264e:	e03b      	b.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d037      	beq.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002658:	f7fe f9f2 	bl	8000a40 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	6a3a      	ldr	r2, [r7, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <UART_WaitOnFlagUntilTimeout+0x30>
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e03a      	b.n	80026e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d020      	beq.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d01d      	beq.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b08      	cmp	r3, #8
 8002698:	d116      	bne.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f856 	bl	8002762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2208      	movs	r2, #8
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e00f      	b.n	80026e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4013      	ands	r3, r2
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d0b4      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	88fa      	ldrh	r2, [r7, #6]
 800270e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2222      	movs	r2, #34	; 0x22
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002734:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0220 	orr.w	r2, r2, #32
 8002754:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002762:	b480      	push	{r7}
 8002764:	b095      	sub	sp, #84	; 0x54
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278a:	643a      	str	r2, [r7, #64]	; 0x40
 800278c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e5      	bne.n	800276a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3314      	adds	r3, #20
 80027a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e5      	bne.n	800279e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d119      	bne.n	800280e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
 80027e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 0310 	bic.w	r3, r3, #16
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	330c      	adds	r3, #12
 80027f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fa:	61ba      	str	r2, [r7, #24]
 80027fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6979      	ldr	r1, [r7, #20]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	613b      	str	r3, [r7, #16]
   return(result);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e5      	bne.n	80027da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800281c:	bf00      	nop
 800281e:	3754      	adds	r7, #84	; 0x54
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff fee8 	bl	8002616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b21      	cmp	r3, #33	; 0x21
 8002860:	d13e      	bne.n	80028e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	d114      	bne.n	8002896 <UART_Transmit_IT+0x48>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d110      	bne.n	8002896 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	1c9a      	adds	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	621a      	str	r2, [r3, #32]
 8002894:	e008      	b.n	80028a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	1c59      	adds	r1, r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6211      	str	r1, [r2, #32]
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4619      	mov	r1, r3
 80028b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002902:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fe79 	bl	8002604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b22      	cmp	r3, #34	; 0x22
 800292e:	f040 80ae 	bne.w	8002a8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293a:	d117      	bne.n	800296c <UART_Receive_IT+0x50>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295a:	b29a      	uxth	r2, r3
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	1c9a      	adds	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
 800296a:	e026      	b.n	80029ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002972:	2300      	movs	r3, #0
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297e:	d007      	beq.n	8002990 <UART_Receive_IT+0x74>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <UART_Receive_IT+0x82>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e008      	b.n	80029b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4619      	mov	r1, r3
 80029c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d15d      	bne.n	8002a8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0220 	bic.w	r2, r2, #32
 80029dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d135      	bne.n	8002a80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	613b      	str	r3, [r7, #16]
   return(result);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f023 0310 	bic.w	r3, r3, #16
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	623a      	str	r2, [r7, #32]
 8002a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	69f9      	ldr	r1, [r7, #28]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e5      	bne.n	8002a1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d10a      	bne.n	8002a72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fdd5 	bl	8002628 <HAL_UARTEx_RxEventCallback>
 8002a7e:	e002      	b.n	8002a86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fd fbab 	bl	80001dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e002      	b.n	8002a90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3730      	adds	r7, #48	; 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ad2:	f023 030c 	bic.w	r3, r3, #12
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <UART_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d103      	bne.n	8002b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b00:	f7fe fdfe 	bl	8001700 <HAL_RCC_GetPCLK2Freq>
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	e002      	b.n	8002b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b08:	f7fe fde6 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <UART_SetConfig+0x118>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	0119      	lsls	r1, r3, #4
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <UART_SetConfig+0x118>)
 8002b46:	fba3 0302 	umull	r0, r3, r3, r2
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2064      	movs	r0, #100	; 0x64
 8002b4e:	fb00 f303 	mul.w	r3, r0, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	3332      	adds	r3, #50	; 0x32
 8002b58:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <UART_SetConfig+0x118>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b64:	4419      	add	r1, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <UART_SetConfig+0x118>)
 8002b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	fb00 f303 	mul.w	r3, r0, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	3332      	adds	r3, #50	; 0x32
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <UART_SetConfig+0x118>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	440a      	add	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	51eb851f 	.word	0x51eb851f

08002bb4 <siprintf>:
 8002bb4:	b40e      	push	{r1, r2, r3}
 8002bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bba:	b500      	push	{lr}
 8002bbc:	b09c      	sub	sp, #112	; 0x70
 8002bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8002bc0:	9002      	str	r0, [sp, #8]
 8002bc2:	9006      	str	r0, [sp, #24]
 8002bc4:	9107      	str	r1, [sp, #28]
 8002bc6:	9104      	str	r1, [sp, #16]
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <siprintf+0x38>)
 8002bca:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <siprintf+0x3c>)
 8002bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bd0:	9105      	str	r1, [sp, #20]
 8002bd2:	6800      	ldr	r0, [r0, #0]
 8002bd4:	a902      	add	r1, sp, #8
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	f000 f98e 	bl	8002ef8 <_svfiprintf_r>
 8002bdc:	2200      	movs	r2, #0
 8002bde:	9b02      	ldr	r3, [sp, #8]
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	b01c      	add	sp, #112	; 0x70
 8002be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002be8:	b003      	add	sp, #12
 8002bea:	4770      	bx	lr
 8002bec:	20000058 	.word	0x20000058
 8002bf0:	ffff0208 	.word	0xffff0208

08002bf4 <memset>:
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4402      	add	r2, r0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <memset+0xa>
 8002bfc:	4770      	bx	lr
 8002bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002c02:	e7f9      	b.n	8002bf8 <memset+0x4>

08002c04 <__errno>:
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <__errno+0x8>)
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000058 	.word	0x20000058

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	2600      	movs	r6, #0
 8002c14:	4d0c      	ldr	r5, [pc, #48]	; (8002c48 <__libc_init_array+0x38>)
 8002c16:	4c0d      	ldr	r4, [pc, #52]	; (8002c4c <__libc_init_array+0x3c>)
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	f000 fc7a 	bl	8003518 <_init>
 8002c24:	2600      	movs	r6, #0
 8002c26:	4d0a      	ldr	r5, [pc, #40]	; (8002c50 <__libc_init_array+0x40>)
 8002c28:	4c0a      	ldr	r4, [pc, #40]	; (8002c54 <__libc_init_array+0x44>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	08003590 	.word	0x08003590
 8002c4c:	08003590 	.word	0x08003590
 8002c50:	08003590 	.word	0x08003590
 8002c54:	08003594 	.word	0x08003594

08002c58 <__retarget_lock_acquire_recursive>:
 8002c58:	4770      	bx	lr

08002c5a <__retarget_lock_release_recursive>:
 8002c5a:	4770      	bx	lr

08002c5c <_free_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4605      	mov	r5, r0
 8002c60:	2900      	cmp	r1, #0
 8002c62:	d040      	beq.n	8002ce6 <_free_r+0x8a>
 8002c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c68:	1f0c      	subs	r4, r1, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bfb8      	it	lt
 8002c6e:	18e4      	addlt	r4, r4, r3
 8002c70:	f000 f8dc 	bl	8002e2c <__malloc_lock>
 8002c74:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <_free_r+0x8c>)
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	b933      	cbnz	r3, 8002c88 <_free_r+0x2c>
 8002c7a:	6063      	str	r3, [r4, #4]
 8002c7c:	6014      	str	r4, [r2, #0]
 8002c7e:	4628      	mov	r0, r5
 8002c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c84:	f000 b8d8 	b.w	8002e38 <__malloc_unlock>
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	d908      	bls.n	8002c9e <_free_r+0x42>
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	1821      	adds	r1, r4, r0
 8002c90:	428b      	cmp	r3, r1
 8002c92:	bf01      	itttt	eq
 8002c94:	6819      	ldreq	r1, [r3, #0]
 8002c96:	685b      	ldreq	r3, [r3, #4]
 8002c98:	1809      	addeq	r1, r1, r0
 8002c9a:	6021      	streq	r1, [r4, #0]
 8002c9c:	e7ed      	b.n	8002c7a <_free_r+0x1e>
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	b10b      	cbz	r3, 8002ca8 <_free_r+0x4c>
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	d9fa      	bls.n	8002c9e <_free_r+0x42>
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	1850      	adds	r0, r2, r1
 8002cac:	42a0      	cmp	r0, r4
 8002cae:	d10b      	bne.n	8002cc8 <_free_r+0x6c>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	4401      	add	r1, r0
 8002cb4:	1850      	adds	r0, r2, r1
 8002cb6:	4283      	cmp	r3, r0
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	d1e0      	bne.n	8002c7e <_free_r+0x22>
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4408      	add	r0, r1
 8002cc2:	6010      	str	r0, [r2, #0]
 8002cc4:	6053      	str	r3, [r2, #4]
 8002cc6:	e7da      	b.n	8002c7e <_free_r+0x22>
 8002cc8:	d902      	bls.n	8002cd0 <_free_r+0x74>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	602b      	str	r3, [r5, #0]
 8002cce:	e7d6      	b.n	8002c7e <_free_r+0x22>
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	1821      	adds	r1, r4, r0
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	bf01      	itttt	eq
 8002cd8:	6819      	ldreq	r1, [r3, #0]
 8002cda:	685b      	ldreq	r3, [r3, #4]
 8002cdc:	1809      	addeq	r1, r1, r0
 8002cde:	6021      	streq	r1, [r4, #0]
 8002ce0:	6063      	str	r3, [r4, #4]
 8002ce2:	6054      	str	r4, [r2, #4]
 8002ce4:	e7cb      	b.n	8002c7e <_free_r+0x22>
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	20000300 	.word	0x20000300

08002cec <sbrk_aligned>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	4e0e      	ldr	r6, [pc, #56]	; (8002d28 <sbrk_aligned+0x3c>)
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	6831      	ldr	r1, [r6, #0]
 8002cf4:	4605      	mov	r5, r0
 8002cf6:	b911      	cbnz	r1, 8002cfe <sbrk_aligned+0x12>
 8002cf8:	f000 fbaa 	bl	8003450 <_sbrk_r>
 8002cfc:	6030      	str	r0, [r6, #0]
 8002cfe:	4621      	mov	r1, r4
 8002d00:	4628      	mov	r0, r5
 8002d02:	f000 fba5 	bl	8003450 <_sbrk_r>
 8002d06:	1c43      	adds	r3, r0, #1
 8002d08:	d00a      	beq.n	8002d20 <sbrk_aligned+0x34>
 8002d0a:	1cc4      	adds	r4, r0, #3
 8002d0c:	f024 0403 	bic.w	r4, r4, #3
 8002d10:	42a0      	cmp	r0, r4
 8002d12:	d007      	beq.n	8002d24 <sbrk_aligned+0x38>
 8002d14:	1a21      	subs	r1, r4, r0
 8002d16:	4628      	mov	r0, r5
 8002d18:	f000 fb9a 	bl	8003450 <_sbrk_r>
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d101      	bne.n	8002d24 <sbrk_aligned+0x38>
 8002d20:	f04f 34ff 	mov.w	r4, #4294967295
 8002d24:	4620      	mov	r0, r4
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	20000304 	.word	0x20000304

08002d2c <_malloc_r>:
 8002d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d30:	1ccd      	adds	r5, r1, #3
 8002d32:	f025 0503 	bic.w	r5, r5, #3
 8002d36:	3508      	adds	r5, #8
 8002d38:	2d0c      	cmp	r5, #12
 8002d3a:	bf38      	it	cc
 8002d3c:	250c      	movcc	r5, #12
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	4607      	mov	r7, r0
 8002d42:	db01      	blt.n	8002d48 <_malloc_r+0x1c>
 8002d44:	42a9      	cmp	r1, r5
 8002d46:	d905      	bls.n	8002d54 <_malloc_r+0x28>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4630      	mov	r0, r6
 8002d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e28 <_malloc_r+0xfc>
 8002d58:	f000 f868 	bl	8002e2c <__malloc_lock>
 8002d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d60:	461c      	mov	r4, r3
 8002d62:	bb5c      	cbnz	r4, 8002dbc <_malloc_r+0x90>
 8002d64:	4629      	mov	r1, r5
 8002d66:	4638      	mov	r0, r7
 8002d68:	f7ff ffc0 	bl	8002cec <sbrk_aligned>
 8002d6c:	1c43      	adds	r3, r0, #1
 8002d6e:	4604      	mov	r4, r0
 8002d70:	d155      	bne.n	8002e1e <_malloc_r+0xf2>
 8002d72:	f8d8 4000 	ldr.w	r4, [r8]
 8002d76:	4626      	mov	r6, r4
 8002d78:	2e00      	cmp	r6, #0
 8002d7a:	d145      	bne.n	8002e08 <_malloc_r+0xdc>
 8002d7c:	2c00      	cmp	r4, #0
 8002d7e:	d048      	beq.n	8002e12 <_malloc_r+0xe6>
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	4631      	mov	r1, r6
 8002d84:	4638      	mov	r0, r7
 8002d86:	eb04 0903 	add.w	r9, r4, r3
 8002d8a:	f000 fb61 	bl	8003450 <_sbrk_r>
 8002d8e:	4581      	cmp	r9, r0
 8002d90:	d13f      	bne.n	8002e12 <_malloc_r+0xe6>
 8002d92:	6821      	ldr	r1, [r4, #0]
 8002d94:	4638      	mov	r0, r7
 8002d96:	1a6d      	subs	r5, r5, r1
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f7ff ffa7 	bl	8002cec <sbrk_aligned>
 8002d9e:	3001      	adds	r0, #1
 8002da0:	d037      	beq.n	8002e12 <_malloc_r+0xe6>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	442b      	add	r3, r5
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	f8d8 3000 	ldr.w	r3, [r8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d038      	beq.n	8002e22 <_malloc_r+0xf6>
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	42a2      	cmp	r2, r4
 8002db4:	d12b      	bne.n	8002e0e <_malloc_r+0xe2>
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	e00f      	b.n	8002ddc <_malloc_r+0xb0>
 8002dbc:	6822      	ldr	r2, [r4, #0]
 8002dbe:	1b52      	subs	r2, r2, r5
 8002dc0:	d41f      	bmi.n	8002e02 <_malloc_r+0xd6>
 8002dc2:	2a0b      	cmp	r2, #11
 8002dc4:	d917      	bls.n	8002df6 <_malloc_r+0xca>
 8002dc6:	1961      	adds	r1, r4, r5
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	6025      	str	r5, [r4, #0]
 8002dcc:	bf18      	it	ne
 8002dce:	6059      	strne	r1, [r3, #4]
 8002dd0:	6863      	ldr	r3, [r4, #4]
 8002dd2:	bf08      	it	eq
 8002dd4:	f8c8 1000 	streq.w	r1, [r8]
 8002dd8:	5162      	str	r2, [r4, r5]
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	4638      	mov	r0, r7
 8002dde:	f104 060b 	add.w	r6, r4, #11
 8002de2:	f000 f829 	bl	8002e38 <__malloc_unlock>
 8002de6:	f026 0607 	bic.w	r6, r6, #7
 8002dea:	1d23      	adds	r3, r4, #4
 8002dec:	1af2      	subs	r2, r6, r3
 8002dee:	d0ae      	beq.n	8002d4e <_malloc_r+0x22>
 8002df0:	1b9b      	subs	r3, r3, r6
 8002df2:	50a3      	str	r3, [r4, r2]
 8002df4:	e7ab      	b.n	8002d4e <_malloc_r+0x22>
 8002df6:	42a3      	cmp	r3, r4
 8002df8:	6862      	ldr	r2, [r4, #4]
 8002dfa:	d1dd      	bne.n	8002db8 <_malloc_r+0x8c>
 8002dfc:	f8c8 2000 	str.w	r2, [r8]
 8002e00:	e7ec      	b.n	8002ddc <_malloc_r+0xb0>
 8002e02:	4623      	mov	r3, r4
 8002e04:	6864      	ldr	r4, [r4, #4]
 8002e06:	e7ac      	b.n	8002d62 <_malloc_r+0x36>
 8002e08:	4634      	mov	r4, r6
 8002e0a:	6876      	ldr	r6, [r6, #4]
 8002e0c:	e7b4      	b.n	8002d78 <_malloc_r+0x4c>
 8002e0e:	4613      	mov	r3, r2
 8002e10:	e7cc      	b.n	8002dac <_malloc_r+0x80>
 8002e12:	230c      	movs	r3, #12
 8002e14:	4638      	mov	r0, r7
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	f000 f80e 	bl	8002e38 <__malloc_unlock>
 8002e1c:	e797      	b.n	8002d4e <_malloc_r+0x22>
 8002e1e:	6025      	str	r5, [r4, #0]
 8002e20:	e7dc      	b.n	8002ddc <_malloc_r+0xb0>
 8002e22:	605b      	str	r3, [r3, #4]
 8002e24:	deff      	udf	#255	; 0xff
 8002e26:	bf00      	nop
 8002e28:	20000300 	.word	0x20000300

08002e2c <__malloc_lock>:
 8002e2c:	4801      	ldr	r0, [pc, #4]	; (8002e34 <__malloc_lock+0x8>)
 8002e2e:	f7ff bf13 	b.w	8002c58 <__retarget_lock_acquire_recursive>
 8002e32:	bf00      	nop
 8002e34:	200002fc 	.word	0x200002fc

08002e38 <__malloc_unlock>:
 8002e38:	4801      	ldr	r0, [pc, #4]	; (8002e40 <__malloc_unlock+0x8>)
 8002e3a:	f7ff bf0e 	b.w	8002c5a <__retarget_lock_release_recursive>
 8002e3e:	bf00      	nop
 8002e40:	200002fc 	.word	0x200002fc

08002e44 <__ssputs_r>:
 8002e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	461f      	mov	r7, r3
 8002e4a:	688e      	ldr	r6, [r1, #8]
 8002e4c:	4682      	mov	sl, r0
 8002e4e:	42be      	cmp	r6, r7
 8002e50:	460c      	mov	r4, r1
 8002e52:	4690      	mov	r8, r2
 8002e54:	680b      	ldr	r3, [r1, #0]
 8002e56:	d82c      	bhi.n	8002eb2 <__ssputs_r+0x6e>
 8002e58:	898a      	ldrh	r2, [r1, #12]
 8002e5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e5e:	d026      	beq.n	8002eae <__ssputs_r+0x6a>
 8002e60:	6965      	ldr	r5, [r4, #20]
 8002e62:	6909      	ldr	r1, [r1, #16]
 8002e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e68:	eba3 0901 	sub.w	r9, r3, r1
 8002e6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e70:	1c7b      	adds	r3, r7, #1
 8002e72:	444b      	add	r3, r9
 8002e74:	106d      	asrs	r5, r5, #1
 8002e76:	429d      	cmp	r5, r3
 8002e78:	bf38      	it	cc
 8002e7a:	461d      	movcc	r5, r3
 8002e7c:	0553      	lsls	r3, r2, #21
 8002e7e:	d527      	bpl.n	8002ed0 <__ssputs_r+0x8c>
 8002e80:	4629      	mov	r1, r5
 8002e82:	f7ff ff53 	bl	8002d2c <_malloc_r>
 8002e86:	4606      	mov	r6, r0
 8002e88:	b360      	cbz	r0, 8002ee4 <__ssputs_r+0xa0>
 8002e8a:	464a      	mov	r2, r9
 8002e8c:	6921      	ldr	r1, [r4, #16]
 8002e8e:	f000 fafd 	bl	800348c <memcpy>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	6126      	str	r6, [r4, #16]
 8002ea0:	444e      	add	r6, r9
 8002ea2:	6026      	str	r6, [r4, #0]
 8002ea4:	463e      	mov	r6, r7
 8002ea6:	6165      	str	r5, [r4, #20]
 8002ea8:	eba5 0509 	sub.w	r5, r5, r9
 8002eac:	60a5      	str	r5, [r4, #8]
 8002eae:	42be      	cmp	r6, r7
 8002eb0:	d900      	bls.n	8002eb4 <__ssputs_r+0x70>
 8002eb2:	463e      	mov	r6, r7
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f000 faaf 	bl	800341c <memmove>
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	68a3      	ldr	r3, [r4, #8]
 8002ec2:	1b9b      	subs	r3, r3, r6
 8002ec4:	60a3      	str	r3, [r4, #8]
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	4433      	add	r3, r6
 8002eca:	6023      	str	r3, [r4, #0]
 8002ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed0:	462a      	mov	r2, r5
 8002ed2:	f000 fae9 	bl	80034a8 <_realloc_r>
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d1e0      	bne.n	8002e9e <__ssputs_r+0x5a>
 8002edc:	4650      	mov	r0, sl
 8002ede:	6921      	ldr	r1, [r4, #16]
 8002ee0:	f7ff febc 	bl	8002c5c <_free_r>
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	f8ca 3000 	str.w	r3, [sl]
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	e7e9      	b.n	8002ecc <__ssputs_r+0x88>

08002ef8 <_svfiprintf_r>:
 8002ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efc:	4698      	mov	r8, r3
 8002efe:	898b      	ldrh	r3, [r1, #12]
 8002f00:	4607      	mov	r7, r0
 8002f02:	061b      	lsls	r3, r3, #24
 8002f04:	460d      	mov	r5, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	b09d      	sub	sp, #116	; 0x74
 8002f0a:	d50e      	bpl.n	8002f2a <_svfiprintf_r+0x32>
 8002f0c:	690b      	ldr	r3, [r1, #16]
 8002f0e:	b963      	cbnz	r3, 8002f2a <_svfiprintf_r+0x32>
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	f7ff ff0b 	bl	8002d2c <_malloc_r>
 8002f16:	6028      	str	r0, [r5, #0]
 8002f18:	6128      	str	r0, [r5, #16]
 8002f1a:	b920      	cbnz	r0, 8002f26 <_svfiprintf_r+0x2e>
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	e0d0      	b.n	80030c8 <_svfiprintf_r+0x1d0>
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	616b      	str	r3, [r5, #20]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f2e:	2320      	movs	r3, #32
 8002f30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f34:	2330      	movs	r3, #48	; 0x30
 8002f36:	f04f 0901 	mov.w	r9, #1
 8002f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f3e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80030e0 <_svfiprintf_r+0x1e8>
 8002f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f46:	4623      	mov	r3, r4
 8002f48:	469a      	mov	sl, r3
 8002f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f4e:	b10a      	cbz	r2, 8002f54 <_svfiprintf_r+0x5c>
 8002f50:	2a25      	cmp	r2, #37	; 0x25
 8002f52:	d1f9      	bne.n	8002f48 <_svfiprintf_r+0x50>
 8002f54:	ebba 0b04 	subs.w	fp, sl, r4
 8002f58:	d00b      	beq.n	8002f72 <_svfiprintf_r+0x7a>
 8002f5a:	465b      	mov	r3, fp
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	4629      	mov	r1, r5
 8002f60:	4638      	mov	r0, r7
 8002f62:	f7ff ff6f 	bl	8002e44 <__ssputs_r>
 8002f66:	3001      	adds	r0, #1
 8002f68:	f000 80a9 	beq.w	80030be <_svfiprintf_r+0x1c6>
 8002f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f6e:	445a      	add	r2, fp
 8002f70:	9209      	str	r2, [sp, #36]	; 0x24
 8002f72:	f89a 3000 	ldrb.w	r3, [sl]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80a1 	beq.w	80030be <_svfiprintf_r+0x1c6>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f86:	f10a 0a01 	add.w	sl, sl, #1
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	9307      	str	r3, [sp, #28]
 8002f8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f92:	931a      	str	r3, [sp, #104]	; 0x68
 8002f94:	4654      	mov	r4, sl
 8002f96:	2205      	movs	r2, #5
 8002f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f9c:	4850      	ldr	r0, [pc, #320]	; (80030e0 <_svfiprintf_r+0x1e8>)
 8002f9e:	f000 fa67 	bl	8003470 <memchr>
 8002fa2:	9a04      	ldr	r2, [sp, #16]
 8002fa4:	b9d8      	cbnz	r0, 8002fde <_svfiprintf_r+0xe6>
 8002fa6:	06d0      	lsls	r0, r2, #27
 8002fa8:	bf44      	itt	mi
 8002faa:	2320      	movmi	r3, #32
 8002fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fb0:	0711      	lsls	r1, r2, #28
 8002fb2:	bf44      	itt	mi
 8002fb4:	232b      	movmi	r3, #43	; 0x2b
 8002fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fba:	f89a 3000 	ldrb.w	r3, [sl]
 8002fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc0:	d015      	beq.n	8002fee <_svfiprintf_r+0xf6>
 8002fc2:	4654      	mov	r4, sl
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f04f 0c0a 	mov.w	ip, #10
 8002fca:	9a07      	ldr	r2, [sp, #28]
 8002fcc:	4621      	mov	r1, r4
 8002fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fd2:	3b30      	subs	r3, #48	; 0x30
 8002fd4:	2b09      	cmp	r3, #9
 8002fd6:	d94d      	bls.n	8003074 <_svfiprintf_r+0x17c>
 8002fd8:	b1b0      	cbz	r0, 8003008 <_svfiprintf_r+0x110>
 8002fda:	9207      	str	r2, [sp, #28]
 8002fdc:	e014      	b.n	8003008 <_svfiprintf_r+0x110>
 8002fde:	eba0 0308 	sub.w	r3, r0, r8
 8002fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	46a2      	mov	sl, r4
 8002fea:	9304      	str	r3, [sp, #16]
 8002fec:	e7d2      	b.n	8002f94 <_svfiprintf_r+0x9c>
 8002fee:	9b03      	ldr	r3, [sp, #12]
 8002ff0:	1d19      	adds	r1, r3, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	9103      	str	r1, [sp, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfbb      	ittet	lt
 8002ffa:	425b      	neglt	r3, r3
 8002ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8003000:	9307      	strge	r3, [sp, #28]
 8003002:	9307      	strlt	r3, [sp, #28]
 8003004:	bfb8      	it	lt
 8003006:	9204      	strlt	r2, [sp, #16]
 8003008:	7823      	ldrb	r3, [r4, #0]
 800300a:	2b2e      	cmp	r3, #46	; 0x2e
 800300c:	d10c      	bne.n	8003028 <_svfiprintf_r+0x130>
 800300e:	7863      	ldrb	r3, [r4, #1]
 8003010:	2b2a      	cmp	r3, #42	; 0x2a
 8003012:	d134      	bne.n	800307e <_svfiprintf_r+0x186>
 8003014:	9b03      	ldr	r3, [sp, #12]
 8003016:	3402      	adds	r4, #2
 8003018:	1d1a      	adds	r2, r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	9203      	str	r2, [sp, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	bfb8      	it	lt
 8003022:	f04f 33ff 	movlt.w	r3, #4294967295
 8003026:	9305      	str	r3, [sp, #20]
 8003028:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80030e4 <_svfiprintf_r+0x1ec>
 800302c:	2203      	movs	r2, #3
 800302e:	4650      	mov	r0, sl
 8003030:	7821      	ldrb	r1, [r4, #0]
 8003032:	f000 fa1d 	bl	8003470 <memchr>
 8003036:	b138      	cbz	r0, 8003048 <_svfiprintf_r+0x150>
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	9b04      	ldr	r3, [sp, #16]
 800303c:	eba0 000a 	sub.w	r0, r0, sl
 8003040:	4082      	lsls	r2, r0
 8003042:	4313      	orrs	r3, r2
 8003044:	3401      	adds	r4, #1
 8003046:	9304      	str	r3, [sp, #16]
 8003048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304c:	2206      	movs	r2, #6
 800304e:	4826      	ldr	r0, [pc, #152]	; (80030e8 <_svfiprintf_r+0x1f0>)
 8003050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003054:	f000 fa0c 	bl	8003470 <memchr>
 8003058:	2800      	cmp	r0, #0
 800305a:	d038      	beq.n	80030ce <_svfiprintf_r+0x1d6>
 800305c:	4b23      	ldr	r3, [pc, #140]	; (80030ec <_svfiprintf_r+0x1f4>)
 800305e:	bb1b      	cbnz	r3, 80030a8 <_svfiprintf_r+0x1b0>
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	3307      	adds	r3, #7
 8003064:	f023 0307 	bic.w	r3, r3, #7
 8003068:	3308      	adds	r3, #8
 800306a:	9303      	str	r3, [sp, #12]
 800306c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306e:	4433      	add	r3, r6
 8003070:	9309      	str	r3, [sp, #36]	; 0x24
 8003072:	e768      	b.n	8002f46 <_svfiprintf_r+0x4e>
 8003074:	460c      	mov	r4, r1
 8003076:	2001      	movs	r0, #1
 8003078:	fb0c 3202 	mla	r2, ip, r2, r3
 800307c:	e7a6      	b.n	8002fcc <_svfiprintf_r+0xd4>
 800307e:	2300      	movs	r3, #0
 8003080:	f04f 0c0a 	mov.w	ip, #10
 8003084:	4619      	mov	r1, r3
 8003086:	3401      	adds	r4, #1
 8003088:	9305      	str	r3, [sp, #20]
 800308a:	4620      	mov	r0, r4
 800308c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003090:	3a30      	subs	r2, #48	; 0x30
 8003092:	2a09      	cmp	r2, #9
 8003094:	d903      	bls.n	800309e <_svfiprintf_r+0x1a6>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0c6      	beq.n	8003028 <_svfiprintf_r+0x130>
 800309a:	9105      	str	r1, [sp, #20]
 800309c:	e7c4      	b.n	8003028 <_svfiprintf_r+0x130>
 800309e:	4604      	mov	r4, r0
 80030a0:	2301      	movs	r3, #1
 80030a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80030a6:	e7f0      	b.n	800308a <_svfiprintf_r+0x192>
 80030a8:	ab03      	add	r3, sp, #12
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	462a      	mov	r2, r5
 80030ae:	4638      	mov	r0, r7
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <_svfiprintf_r+0x1f8>)
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	f3af 8000 	nop.w
 80030b8:	1c42      	adds	r2, r0, #1
 80030ba:	4606      	mov	r6, r0
 80030bc:	d1d6      	bne.n	800306c <_svfiprintf_r+0x174>
 80030be:	89ab      	ldrh	r3, [r5, #12]
 80030c0:	065b      	lsls	r3, r3, #25
 80030c2:	f53f af2d 	bmi.w	8002f20 <_svfiprintf_r+0x28>
 80030c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c8:	b01d      	add	sp, #116	; 0x74
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ce:	ab03      	add	r3, sp, #12
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	462a      	mov	r2, r5
 80030d4:	4638      	mov	r0, r7
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <_svfiprintf_r+0x1f8>)
 80030d8:	a904      	add	r1, sp, #16
 80030da:	f000 f87d 	bl	80031d8 <_printf_i>
 80030de:	e7eb      	b.n	80030b8 <_svfiprintf_r+0x1c0>
 80030e0:	0800355c 	.word	0x0800355c
 80030e4:	08003562 	.word	0x08003562
 80030e8:	08003566 	.word	0x08003566
 80030ec:	00000000 	.word	0x00000000
 80030f0:	08002e45 	.word	0x08002e45

080030f4 <_printf_common>:
 80030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	4616      	mov	r6, r2
 80030fa:	4699      	mov	r9, r3
 80030fc:	688a      	ldr	r2, [r1, #8]
 80030fe:	690b      	ldr	r3, [r1, #16]
 8003100:	4607      	mov	r7, r0
 8003102:	4293      	cmp	r3, r2
 8003104:	bfb8      	it	lt
 8003106:	4613      	movlt	r3, r2
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800310e:	460c      	mov	r4, r1
 8003110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003114:	b10a      	cbz	r2, 800311a <_printf_common+0x26>
 8003116:	3301      	adds	r3, #1
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	0699      	lsls	r1, r3, #26
 800311e:	bf42      	ittt	mi
 8003120:	6833      	ldrmi	r3, [r6, #0]
 8003122:	3302      	addmi	r3, #2
 8003124:	6033      	strmi	r3, [r6, #0]
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	f015 0506 	ands.w	r5, r5, #6
 800312c:	d106      	bne.n	800313c <_printf_common+0x48>
 800312e:	f104 0a19 	add.w	sl, r4, #25
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	6832      	ldr	r2, [r6, #0]
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	42ab      	cmp	r3, r5
 800313a:	dc2b      	bgt.n	8003194 <_printf_common+0xa0>
 800313c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003140:	1e13      	subs	r3, r2, #0
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	bf18      	it	ne
 8003146:	2301      	movne	r3, #1
 8003148:	0692      	lsls	r2, r2, #26
 800314a:	d430      	bmi.n	80031ae <_printf_common+0xba>
 800314c:	4649      	mov	r1, r9
 800314e:	4638      	mov	r0, r7
 8003150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003154:	47c0      	blx	r8
 8003156:	3001      	adds	r0, #1
 8003158:	d023      	beq.n	80031a2 <_printf_common+0xae>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	6922      	ldr	r2, [r4, #16]
 800315e:	f003 0306 	and.w	r3, r3, #6
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf14      	ite	ne
 8003166:	2500      	movne	r5, #0
 8003168:	6833      	ldreq	r3, [r6, #0]
 800316a:	f04f 0600 	mov.w	r6, #0
 800316e:	bf08      	it	eq
 8003170:	68e5      	ldreq	r5, [r4, #12]
 8003172:	f104 041a 	add.w	r4, r4, #26
 8003176:	bf08      	it	eq
 8003178:	1aed      	subeq	r5, r5, r3
 800317a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800317e:	bf08      	it	eq
 8003180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003184:	4293      	cmp	r3, r2
 8003186:	bfc4      	itt	gt
 8003188:	1a9b      	subgt	r3, r3, r2
 800318a:	18ed      	addgt	r5, r5, r3
 800318c:	42b5      	cmp	r5, r6
 800318e:	d11a      	bne.n	80031c6 <_printf_common+0xd2>
 8003190:	2000      	movs	r0, #0
 8003192:	e008      	b.n	80031a6 <_printf_common+0xb2>
 8003194:	2301      	movs	r3, #1
 8003196:	4652      	mov	r2, sl
 8003198:	4649      	mov	r1, r9
 800319a:	4638      	mov	r0, r7
 800319c:	47c0      	blx	r8
 800319e:	3001      	adds	r0, #1
 80031a0:	d103      	bne.n	80031aa <_printf_common+0xb6>
 80031a2:	f04f 30ff 	mov.w	r0, #4294967295
 80031a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031aa:	3501      	adds	r5, #1
 80031ac:	e7c1      	b.n	8003132 <_printf_common+0x3e>
 80031ae:	2030      	movs	r0, #48	; 0x30
 80031b0:	18e1      	adds	r1, r4, r3
 80031b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031bc:	4422      	add	r2, r4
 80031be:	3302      	adds	r3, #2
 80031c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031c4:	e7c2      	b.n	800314c <_printf_common+0x58>
 80031c6:	2301      	movs	r3, #1
 80031c8:	4622      	mov	r2, r4
 80031ca:	4649      	mov	r1, r9
 80031cc:	4638      	mov	r0, r7
 80031ce:	47c0      	blx	r8
 80031d0:	3001      	adds	r0, #1
 80031d2:	d0e6      	beq.n	80031a2 <_printf_common+0xae>
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7d9      	b.n	800318c <_printf_common+0x98>

080031d8 <_printf_i>:
 80031d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031dc:	7e0f      	ldrb	r7, [r1, #24]
 80031de:	4691      	mov	r9, r2
 80031e0:	2f78      	cmp	r7, #120	; 0x78
 80031e2:	4680      	mov	r8, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	469a      	mov	sl, r3
 80031e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031ee:	d807      	bhi.n	8003200 <_printf_i+0x28>
 80031f0:	2f62      	cmp	r7, #98	; 0x62
 80031f2:	d80a      	bhi.n	800320a <_printf_i+0x32>
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	f000 80d5 	beq.w	80033a4 <_printf_i+0x1cc>
 80031fa:	2f58      	cmp	r7, #88	; 0x58
 80031fc:	f000 80c1 	beq.w	8003382 <_printf_i+0x1aa>
 8003200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003208:	e03a      	b.n	8003280 <_printf_i+0xa8>
 800320a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800320e:	2b15      	cmp	r3, #21
 8003210:	d8f6      	bhi.n	8003200 <_printf_i+0x28>
 8003212:	a101      	add	r1, pc, #4	; (adr r1, 8003218 <_printf_i+0x40>)
 8003214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003218:	08003271 	.word	0x08003271
 800321c:	08003285 	.word	0x08003285
 8003220:	08003201 	.word	0x08003201
 8003224:	08003201 	.word	0x08003201
 8003228:	08003201 	.word	0x08003201
 800322c:	08003201 	.word	0x08003201
 8003230:	08003285 	.word	0x08003285
 8003234:	08003201 	.word	0x08003201
 8003238:	08003201 	.word	0x08003201
 800323c:	08003201 	.word	0x08003201
 8003240:	08003201 	.word	0x08003201
 8003244:	0800338b 	.word	0x0800338b
 8003248:	080032b1 	.word	0x080032b1
 800324c:	08003345 	.word	0x08003345
 8003250:	08003201 	.word	0x08003201
 8003254:	08003201 	.word	0x08003201
 8003258:	080033ad 	.word	0x080033ad
 800325c:	08003201 	.word	0x08003201
 8003260:	080032b1 	.word	0x080032b1
 8003264:	08003201 	.word	0x08003201
 8003268:	08003201 	.word	0x08003201
 800326c:	0800334d 	.word	0x0800334d
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	602a      	str	r2, [r5, #0]
 8003278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800327c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003280:	2301      	movs	r3, #1
 8003282:	e0a0      	b.n	80033c6 <_printf_i+0x1ee>
 8003284:	6820      	ldr	r0, [r4, #0]
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	0607      	lsls	r7, r0, #24
 800328a:	f103 0104 	add.w	r1, r3, #4
 800328e:	6029      	str	r1, [r5, #0]
 8003290:	d501      	bpl.n	8003296 <_printf_i+0xbe>
 8003292:	681e      	ldr	r6, [r3, #0]
 8003294:	e003      	b.n	800329e <_printf_i+0xc6>
 8003296:	0646      	lsls	r6, r0, #25
 8003298:	d5fb      	bpl.n	8003292 <_printf_i+0xba>
 800329a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800329e:	2e00      	cmp	r6, #0
 80032a0:	da03      	bge.n	80032aa <_printf_i+0xd2>
 80032a2:	232d      	movs	r3, #45	; 0x2d
 80032a4:	4276      	negs	r6, r6
 80032a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032aa:	230a      	movs	r3, #10
 80032ac:	4859      	ldr	r0, [pc, #356]	; (8003414 <_printf_i+0x23c>)
 80032ae:	e012      	b.n	80032d6 <_printf_i+0xfe>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	1d19      	adds	r1, r3, #4
 80032b6:	6029      	str	r1, [r5, #0]
 80032b8:	0605      	lsls	r5, r0, #24
 80032ba:	d501      	bpl.n	80032c0 <_printf_i+0xe8>
 80032bc:	681e      	ldr	r6, [r3, #0]
 80032be:	e002      	b.n	80032c6 <_printf_i+0xee>
 80032c0:	0641      	lsls	r1, r0, #25
 80032c2:	d5fb      	bpl.n	80032bc <_printf_i+0xe4>
 80032c4:	881e      	ldrh	r6, [r3, #0]
 80032c6:	2f6f      	cmp	r7, #111	; 0x6f
 80032c8:	bf0c      	ite	eq
 80032ca:	2308      	moveq	r3, #8
 80032cc:	230a      	movne	r3, #10
 80032ce:	4851      	ldr	r0, [pc, #324]	; (8003414 <_printf_i+0x23c>)
 80032d0:	2100      	movs	r1, #0
 80032d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032d6:	6865      	ldr	r5, [r4, #4]
 80032d8:	2d00      	cmp	r5, #0
 80032da:	bfa8      	it	ge
 80032dc:	6821      	ldrge	r1, [r4, #0]
 80032de:	60a5      	str	r5, [r4, #8]
 80032e0:	bfa4      	itt	ge
 80032e2:	f021 0104 	bicge.w	r1, r1, #4
 80032e6:	6021      	strge	r1, [r4, #0]
 80032e8:	b90e      	cbnz	r6, 80032ee <_printf_i+0x116>
 80032ea:	2d00      	cmp	r5, #0
 80032ec:	d04b      	beq.n	8003386 <_printf_i+0x1ae>
 80032ee:	4615      	mov	r5, r2
 80032f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80032f4:	fb03 6711 	mls	r7, r3, r1, r6
 80032f8:	5dc7      	ldrb	r7, [r0, r7]
 80032fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032fe:	4637      	mov	r7, r6
 8003300:	42bb      	cmp	r3, r7
 8003302:	460e      	mov	r6, r1
 8003304:	d9f4      	bls.n	80032f0 <_printf_i+0x118>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d10b      	bne.n	8003322 <_printf_i+0x14a>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	07de      	lsls	r6, r3, #31
 800330e:	d508      	bpl.n	8003322 <_printf_i+0x14a>
 8003310:	6923      	ldr	r3, [r4, #16]
 8003312:	6861      	ldr	r1, [r4, #4]
 8003314:	4299      	cmp	r1, r3
 8003316:	bfde      	ittt	le
 8003318:	2330      	movle	r3, #48	; 0x30
 800331a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800331e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003322:	1b52      	subs	r2, r2, r5
 8003324:	6122      	str	r2, [r4, #16]
 8003326:	464b      	mov	r3, r9
 8003328:	4621      	mov	r1, r4
 800332a:	4640      	mov	r0, r8
 800332c:	f8cd a000 	str.w	sl, [sp]
 8003330:	aa03      	add	r2, sp, #12
 8003332:	f7ff fedf 	bl	80030f4 <_printf_common>
 8003336:	3001      	adds	r0, #1
 8003338:	d14a      	bne.n	80033d0 <_printf_i+0x1f8>
 800333a:	f04f 30ff 	mov.w	r0, #4294967295
 800333e:	b004      	add	sp, #16
 8003340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	f043 0320 	orr.w	r3, r3, #32
 800334a:	6023      	str	r3, [r4, #0]
 800334c:	2778      	movs	r7, #120	; 0x78
 800334e:	4832      	ldr	r0, [pc, #200]	; (8003418 <_printf_i+0x240>)
 8003350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	6829      	ldr	r1, [r5, #0]
 8003358:	061f      	lsls	r7, r3, #24
 800335a:	f851 6b04 	ldr.w	r6, [r1], #4
 800335e:	d402      	bmi.n	8003366 <_printf_i+0x18e>
 8003360:	065f      	lsls	r7, r3, #25
 8003362:	bf48      	it	mi
 8003364:	b2b6      	uxthmi	r6, r6
 8003366:	07df      	lsls	r7, r3, #31
 8003368:	bf48      	it	mi
 800336a:	f043 0320 	orrmi.w	r3, r3, #32
 800336e:	6029      	str	r1, [r5, #0]
 8003370:	bf48      	it	mi
 8003372:	6023      	strmi	r3, [r4, #0]
 8003374:	b91e      	cbnz	r6, 800337e <_printf_i+0x1a6>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	f023 0320 	bic.w	r3, r3, #32
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	2310      	movs	r3, #16
 8003380:	e7a6      	b.n	80032d0 <_printf_i+0xf8>
 8003382:	4824      	ldr	r0, [pc, #144]	; (8003414 <_printf_i+0x23c>)
 8003384:	e7e4      	b.n	8003350 <_printf_i+0x178>
 8003386:	4615      	mov	r5, r2
 8003388:	e7bd      	b.n	8003306 <_printf_i+0x12e>
 800338a:	682b      	ldr	r3, [r5, #0]
 800338c:	6826      	ldr	r6, [r4, #0]
 800338e:	1d18      	adds	r0, r3, #4
 8003390:	6961      	ldr	r1, [r4, #20]
 8003392:	6028      	str	r0, [r5, #0]
 8003394:	0635      	lsls	r5, r6, #24
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	d501      	bpl.n	800339e <_printf_i+0x1c6>
 800339a:	6019      	str	r1, [r3, #0]
 800339c:	e002      	b.n	80033a4 <_printf_i+0x1cc>
 800339e:	0670      	lsls	r0, r6, #25
 80033a0:	d5fb      	bpl.n	800339a <_printf_i+0x1c2>
 80033a2:	8019      	strh	r1, [r3, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	4615      	mov	r5, r2
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	e7bc      	b.n	8003326 <_printf_i+0x14e>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	2100      	movs	r1, #0
 80033b0:	1d1a      	adds	r2, r3, #4
 80033b2:	602a      	str	r2, [r5, #0]
 80033b4:	681d      	ldr	r5, [r3, #0]
 80033b6:	6862      	ldr	r2, [r4, #4]
 80033b8:	4628      	mov	r0, r5
 80033ba:	f000 f859 	bl	8003470 <memchr>
 80033be:	b108      	cbz	r0, 80033c4 <_printf_i+0x1ec>
 80033c0:	1b40      	subs	r0, r0, r5
 80033c2:	6060      	str	r0, [r4, #4]
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	6123      	str	r3, [r4, #16]
 80033c8:	2300      	movs	r3, #0
 80033ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ce:	e7aa      	b.n	8003326 <_printf_i+0x14e>
 80033d0:	462a      	mov	r2, r5
 80033d2:	4649      	mov	r1, r9
 80033d4:	4640      	mov	r0, r8
 80033d6:	6923      	ldr	r3, [r4, #16]
 80033d8:	47d0      	blx	sl
 80033da:	3001      	adds	r0, #1
 80033dc:	d0ad      	beq.n	800333a <_printf_i+0x162>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	079b      	lsls	r3, r3, #30
 80033e2:	d413      	bmi.n	800340c <_printf_i+0x234>
 80033e4:	68e0      	ldr	r0, [r4, #12]
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	4298      	cmp	r0, r3
 80033ea:	bfb8      	it	lt
 80033ec:	4618      	movlt	r0, r3
 80033ee:	e7a6      	b.n	800333e <_printf_i+0x166>
 80033f0:	2301      	movs	r3, #1
 80033f2:	4632      	mov	r2, r6
 80033f4:	4649      	mov	r1, r9
 80033f6:	4640      	mov	r0, r8
 80033f8:	47d0      	blx	sl
 80033fa:	3001      	adds	r0, #1
 80033fc:	d09d      	beq.n	800333a <_printf_i+0x162>
 80033fe:	3501      	adds	r5, #1
 8003400:	68e3      	ldr	r3, [r4, #12]
 8003402:	9903      	ldr	r1, [sp, #12]
 8003404:	1a5b      	subs	r3, r3, r1
 8003406:	42ab      	cmp	r3, r5
 8003408:	dcf2      	bgt.n	80033f0 <_printf_i+0x218>
 800340a:	e7eb      	b.n	80033e4 <_printf_i+0x20c>
 800340c:	2500      	movs	r5, #0
 800340e:	f104 0619 	add.w	r6, r4, #25
 8003412:	e7f5      	b.n	8003400 <_printf_i+0x228>
 8003414:	0800356d 	.word	0x0800356d
 8003418:	0800357e 	.word	0x0800357e

0800341c <memmove>:
 800341c:	4288      	cmp	r0, r1
 800341e:	b510      	push	{r4, lr}
 8003420:	eb01 0402 	add.w	r4, r1, r2
 8003424:	d902      	bls.n	800342c <memmove+0x10>
 8003426:	4284      	cmp	r4, r0
 8003428:	4623      	mov	r3, r4
 800342a:	d807      	bhi.n	800343c <memmove+0x20>
 800342c:	1e43      	subs	r3, r0, #1
 800342e:	42a1      	cmp	r1, r4
 8003430:	d008      	beq.n	8003444 <memmove+0x28>
 8003432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800343a:	e7f8      	b.n	800342e <memmove+0x12>
 800343c:	4601      	mov	r1, r0
 800343e:	4402      	add	r2, r0
 8003440:	428a      	cmp	r2, r1
 8003442:	d100      	bne.n	8003446 <memmove+0x2a>
 8003444:	bd10      	pop	{r4, pc}
 8003446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800344a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800344e:	e7f7      	b.n	8003440 <memmove+0x24>

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	2300      	movs	r3, #0
 8003454:	4d05      	ldr	r5, [pc, #20]	; (800346c <_sbrk_r+0x1c>)
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd f8e4 	bl	8000628 <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200002f8 	.word	0x200002f8

08003470 <memchr>:
 8003470:	4603      	mov	r3, r0
 8003472:	b510      	push	{r4, lr}
 8003474:	b2c9      	uxtb	r1, r1
 8003476:	4402      	add	r2, r0
 8003478:	4293      	cmp	r3, r2
 800347a:	4618      	mov	r0, r3
 800347c:	d101      	bne.n	8003482 <memchr+0x12>
 800347e:	2000      	movs	r0, #0
 8003480:	e003      	b.n	800348a <memchr+0x1a>
 8003482:	7804      	ldrb	r4, [r0, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	428c      	cmp	r4, r1
 8003488:	d1f6      	bne.n	8003478 <memchr+0x8>
 800348a:	bd10      	pop	{r4, pc}

0800348c <memcpy>:
 800348c:	440a      	add	r2, r1
 800348e:	4291      	cmp	r1, r2
 8003490:	f100 33ff 	add.w	r3, r0, #4294967295
 8003494:	d100      	bne.n	8003498 <memcpy+0xc>
 8003496:	4770      	bx	lr
 8003498:	b510      	push	{r4, lr}
 800349a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800349e:	4291      	cmp	r1, r2
 80034a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034a4:	d1f9      	bne.n	800349a <memcpy+0xe>
 80034a6:	bd10      	pop	{r4, pc}

080034a8 <_realloc_r>:
 80034a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ac:	4680      	mov	r8, r0
 80034ae:	4614      	mov	r4, r2
 80034b0:	460e      	mov	r6, r1
 80034b2:	b921      	cbnz	r1, 80034be <_realloc_r+0x16>
 80034b4:	4611      	mov	r1, r2
 80034b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ba:	f7ff bc37 	b.w	8002d2c <_malloc_r>
 80034be:	b92a      	cbnz	r2, 80034cc <_realloc_r+0x24>
 80034c0:	f7ff fbcc 	bl	8002c5c <_free_r>
 80034c4:	4625      	mov	r5, r4
 80034c6:	4628      	mov	r0, r5
 80034c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034cc:	f000 f81b 	bl	8003506 <_malloc_usable_size_r>
 80034d0:	4284      	cmp	r4, r0
 80034d2:	4607      	mov	r7, r0
 80034d4:	d802      	bhi.n	80034dc <_realloc_r+0x34>
 80034d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034da:	d812      	bhi.n	8003502 <_realloc_r+0x5a>
 80034dc:	4621      	mov	r1, r4
 80034de:	4640      	mov	r0, r8
 80034e0:	f7ff fc24 	bl	8002d2c <_malloc_r>
 80034e4:	4605      	mov	r5, r0
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d0ed      	beq.n	80034c6 <_realloc_r+0x1e>
 80034ea:	42bc      	cmp	r4, r7
 80034ec:	4622      	mov	r2, r4
 80034ee:	4631      	mov	r1, r6
 80034f0:	bf28      	it	cs
 80034f2:	463a      	movcs	r2, r7
 80034f4:	f7ff ffca 	bl	800348c <memcpy>
 80034f8:	4631      	mov	r1, r6
 80034fa:	4640      	mov	r0, r8
 80034fc:	f7ff fbae 	bl	8002c5c <_free_r>
 8003500:	e7e1      	b.n	80034c6 <_realloc_r+0x1e>
 8003502:	4635      	mov	r5, r6
 8003504:	e7df      	b.n	80034c6 <_realloc_r+0x1e>

08003506 <_malloc_usable_size_r>:
 8003506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800350a:	1f18      	subs	r0, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	bfbc      	itt	lt
 8003510:	580b      	ldrlt	r3, [r1, r0]
 8003512:	18c0      	addlt	r0, r0, r3
 8003514:	4770      	bx	lr
	...

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
