
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  0800312c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  0800312c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0c6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de8  00000000  00000000  0002c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000971  00000000  00000000  0002eb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ab2  00000000  00000000  0002f501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dfac  00000000  00000000  00031fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088b6f  00000000  00000000  0003ff5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003724  00000000  00000000  000c8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cc1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003010 	.word	0x08003010

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003010 	.word	0x08003010

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fd74 	bl	8000c50 <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Init();
 8000168:	f000 fa4e 	bl	8000608 <SCH_Init>
  unsigned char task_index = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000172:	f000 f8e3 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000176:	f000 f993 	bl	80004a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800017a:	f000 f91b 	bl	80003b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800017e:	f000 f965 	bl	800044c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000182:	484a      	ldr	r0, [pc, #296]	; (80002ac <main+0x150>)
 8000184:	f001 fce2 	bl	8001b4c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Add TASK_0 with a delay of 500ms and period of 500ms
  task_index = SCH_Add_Task(TASK_0, 500, 500);
 8000188:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800018c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000190:	4847      	ldr	r0, [pc, #284]	; (80002b0 <main+0x154>)
 8000192:	f000 fa83 	bl	800069c <SCH_Add_Task>
 8000196:	4603      	mov	r3, r0
 8000198:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
  char data[1000];
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 800019c:	f897 23ef 	ldrb.w	r2, [r7, #1007]	; 0x3ef
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	4944      	ldr	r1, [pc, #272]	; (80002b4 <main+0x158>)
 80001a4:	4618      	mov	r0, r3
 80001a6:	f002 fa81 	bl	80026ac <siprintf>
 80001aa:	4603      	mov	r3, r0
 80001ac:	b29a      	uxth	r2, r3
 80001ae:	1d39      	adds	r1, r7, #4
 80001b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b4:	4840      	ldr	r0, [pc, #256]	; (80002b8 <main+0x15c>)
 80001b6:	f002 f8a5 	bl	8002304 <HAL_UART_Transmit>

  // Add TASK_1 with a delay of 1000ms and period of 1000ms
  task_index = SCH_Add_Task(TASK_1, 1000, 1000);
 80001ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001c2:	483e      	ldr	r0, [pc, #248]	; (80002bc <main+0x160>)
 80001c4:	f000 fa6a 	bl	800069c <SCH_Add_Task>
 80001c8:	4603      	mov	r3, r0
 80001ca:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 80001ce:	f897 23ef 	ldrb.w	r2, [r7, #1007]	; 0x3ef
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4937      	ldr	r1, [pc, #220]	; (80002b4 <main+0x158>)
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fa68 	bl	80026ac <siprintf>
 80001dc:	4603      	mov	r3, r0
 80001de:	b29a      	uxth	r2, r3
 80001e0:	1d39      	adds	r1, r7, #4
 80001e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e6:	4834      	ldr	r0, [pc, #208]	; (80002b8 <main+0x15c>)
 80001e8:	f002 f88c 	bl	8002304 <HAL_UART_Transmit>

  // Add TASK_2 with a delay of 1500ms and period of 2000ms
  task_index = SCH_Add_Task(TASK_2, 1500, 2000);
 80001ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80001f0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80001f4:	4832      	ldr	r0, [pc, #200]	; (80002c0 <main+0x164>)
 80001f6:	f000 fa51 	bl	800069c <SCH_Add_Task>
 80001fa:	4603      	mov	r3, r0
 80001fc:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 8000200:	f897 23ef 	ldrb.w	r2, [r7, #1007]	; 0x3ef
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	492b      	ldr	r1, [pc, #172]	; (80002b4 <main+0x158>)
 8000208:	4618      	mov	r0, r3
 800020a:	f002 fa4f 	bl	80026ac <siprintf>
 800020e:	4603      	mov	r3, r0
 8000210:	b29a      	uxth	r2, r3
 8000212:	1d39      	adds	r1, r7, #4
 8000214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000218:	4827      	ldr	r0, [pc, #156]	; (80002b8 <main+0x15c>)
 800021a:	f002 f873 	bl	8002304 <HAL_UART_Transmit>

  // Add TASK_3 with a delay of 2000ms and period of 1000ms
  task_index = SCH_Add_Task(TASK_3, 2000, 1000);
 800021e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000222:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000226:	4827      	ldr	r0, [pc, #156]	; (80002c4 <main+0x168>)
 8000228:	f000 fa38 	bl	800069c <SCH_Add_Task>
 800022c:	4603      	mov	r3, r0
 800022e:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 8000232:	f897 23ef 	ldrb.w	r2, [r7, #1007]	; 0x3ef
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	491e      	ldr	r1, [pc, #120]	; (80002b4 <main+0x158>)
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fa36 	bl	80026ac <siprintf>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	1d39      	adds	r1, r7, #4
 8000246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024a:	481b      	ldr	r0, [pc, #108]	; (80002b8 <main+0x15c>)
 800024c:	f002 f85a 	bl	8002304 <HAL_UART_Transmit>

  // Add TASK_4 with a delay of 2500ms and period of 500ms
  task_index = SCH_Add_Task(TASK_4, 2500, 500);
 8000250:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000254:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000258:	481b      	ldr	r0, [pc, #108]	; (80002c8 <main+0x16c>)
 800025a:	f000 fa1f 	bl	800069c <SCH_Add_Task>
 800025e:	4603      	mov	r3, r0
 8000260:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 8000264:	f897 23ef 	ldrb.w	r2, [r7, #1007]	; 0x3ef
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4912      	ldr	r1, [pc, #72]	; (80002b4 <main+0x158>)
 800026c:	4618      	mov	r0, r3
 800026e:	f002 fa1d 	bl	80026ac <siprintf>
 8000272:	4603      	mov	r3, r0
 8000274:	b29a      	uxth	r2, r3
 8000276:	1d39      	adds	r1, r7, #4
 8000278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027c:	480e      	ldr	r0, [pc, #56]	; (80002b8 <main+0x15c>)
 800027e:	f002 f841 	bl	8002304 <HAL_UART_Transmit>

  /* USER CODE END 2 */
  setTimer0(500);
 8000282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000286:	f000 fc75 	bl	8000b74 <setTimer0>
  /* Infinite loop */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 800028a:	f000 fb07 	bl	800089c <SCH_Dispatch_Tasks>
	  if (timer0_flag == 1)
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0x170>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d1f9      	bne.n	800028a <main+0x12e>
	  {
		  HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	480d      	ldr	r0, [pc, #52]	; (80002d0 <main+0x174>)
 800029c:	f000 ffdc 	bl	8001258 <HAL_GPIO_TogglePin>
	      setTimer0(500);
 80002a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a4:	f000 fc66 	bl	8000b74 <setTimer0>
	  SCH_Dispatch_Tasks();
 80002a8:	e7ef      	b.n	800028a <main+0x12e>
 80002aa:	bf00      	nop
 80002ac:	20000078 	.word	0x20000078
 80002b0:	080002d5 	.word	0x080002d5
 80002b4:	08003028 	.word	0x08003028
 80002b8:	200000c0 	.word	0x200000c0
 80002bc:	080002e9 	.word	0x080002e9
 80002c0:	080002fd 	.word	0x080002fd
 80002c4:	08000311 	.word	0x08000311
 80002c8:	08000325 	.word	0x08000325
 80002cc:	200001e0 	.word	0x200001e0
 80002d0:	40010800 	.word	0x40010800

080002d4 <TASK_0>:

// Declare elapsed_time as extern to use in the tasks
extern uint32_t elapsed_time;

// Define task functions
void TASK_0(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
    // Task 0 code here
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle LED on PA3
 80002d8:	2110      	movs	r1, #16
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <TASK_0+0x10>)
 80002dc:	f000 ffbc 	bl	8001258 <HAL_GPIO_TogglePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010800 	.word	0x40010800

080002e8 <TASK_1>:

void TASK_1(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    // Task 1 code here
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // Toggle LED on PA4
 80002ec:	2120      	movs	r1, #32
 80002ee:	4802      	ldr	r0, [pc, #8]	; (80002f8 <TASK_1+0x10>)
 80002f0:	f000 ffb2 	bl	8001258 <HAL_GPIO_TogglePin>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40010800 	.word	0x40010800

080002fc <TASK_2>:

void TASK_2(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    // Task 2 code here
    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // Toggle LED on PA5
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <TASK_2+0x10>)
 8000304:	f000 ffa8 	bl	8001258 <HAL_GPIO_TogglePin>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40010800 	.word	0x40010800

08000310 <TASK_3>:

void TASK_3(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
    // Task 3 code here
    HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin); // Toggle LED on PA6
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <TASK_3+0x10>)
 8000318:	f000 ff9e 	bl	8001258 <HAL_GPIO_TogglePin>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010800 	.word	0x40010800

08000324 <TASK_4>:

void TASK_4(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    // Task 4 code here
    HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin); // Toggle LED on PA7
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <TASK_4+0x14>)
 800032e:	f000 ff93 	bl	8001258 <HAL_GPIO_TogglePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f9ce 	bl	80026ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	2310      	movs	r3, #16
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800036a:	2300      	movs	r3, #0
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	4618      	mov	r0, r3
 8000374:	f000 ff8a 	bl	800128c <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800037e:	f000 f8c3 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f001 f9f8 	bl	8001790 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f8af 	bl	8000508 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	463b      	mov	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_TIM2_Init+0x94>)
 80003d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_TIM2_Init+0x94>)
 80003da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <MX_TIM2_Init+0x94>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_TIM2_Init+0x94>)
 80003e8:	2209      	movs	r2, #9
 80003ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_TIM2_Init+0x94>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_TIM2_Init+0x94>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f8:	4813      	ldr	r0, [pc, #76]	; (8000448 <MX_TIM2_Init+0x94>)
 80003fa:	f001 fb57 	bl	8001aac <HAL_TIM_Base_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000404:	f000 f880 	bl	8000508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	4619      	mov	r1, r3
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <MX_TIM2_Init+0x94>)
 8000416:	f001 fcd5 	bl	8001dc4 <HAL_TIM_ConfigClockSource>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000420:	f000 f872 	bl	8000508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800042c:	463b      	mov	r3, r7
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_TIM2_Init+0x94>)
 8000432:	f001 fead 	bl	8002190 <HAL_TIMEx_MasterConfigSynchronization>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800043c:	f000 f864 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000078 	.word	0x20000078

0800044c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_USART2_UART_Init+0x50>)
 8000454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800045c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000484:	f001 feee 	bl	8002264 <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800048e:	f000 f83b 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000c0 	.word	0x200000c0
 800049c:	40004400 	.word	0x40004400

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_GPIO_Init+0x60>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a11      	ldr	r2, [pc, #68]	; (8000500 <MX_GPIO_Init+0x60>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_GPIO_Init+0x60>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80004d2:	480c      	ldr	r0, [pc, #48]	; (8000504 <MX_GPIO_Init+0x64>)
 80004d4:	f000 fea8 	bl	8001228 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80004d8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80004dc:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2302      	movs	r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	4619      	mov	r1, r3
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <MX_GPIO_Init+0x64>)
 80004f2:	f000 fd1d 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f6:	bf00      	nop
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <SCH_Delete_Task>:
uint8_t current_index_task = 0;

extern UART_HandleTypeDef huart2;

// Delete Task
uint8_t SCH_Delete_Task(uint32_t taskID) {
 8000514:	b4b0      	push	{r4, r5, r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    if (taskID >= current_index_task) {
 800051c:	4b38      	ldr	r3, [pc, #224]	; (8000600 <SCH_Delete_Task+0xec>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4293      	cmp	r3, r2
 8000526:	d301      	bcc.n	800052c <SCH_Delete_Task+0x18>
        return -1; // No task to delete
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	e063      	b.n	80005f4 <SCH_Delete_Task+0xe0>
    }
    for (int i = taskID; i < current_index_task - 1; i++) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e017      	b.n	8000562 <SCH_Delete_Task+0x4e>
        SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	4833      	ldr	r0, [pc, #204]	; (8000604 <SCH_Delete_Task+0xf0>)
 8000538:	68f9      	ldr	r1, [r7, #12]
 800053a:	460b      	mov	r3, r1
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	440b      	add	r3, r1
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4418      	add	r0, r3
 8000544:	492f      	ldr	r1, [pc, #188]	; (8000604 <SCH_Delete_Task+0xf0>)
 8000546:	4613      	mov	r3, r2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	4604      	mov	r4, r0
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	6023      	str	r3, [r4, #0]
    for (int i = taskID; i < current_index_task - 1; i++) {
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3301      	adds	r3, #1
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SCH_Delete_Task+0xec>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3b01      	subs	r3, #1
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe1      	blt.n	8000532 <SCH_Delete_Task+0x1e>
    }
    // Reset the last task after shifting
    current_index_task--;
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SCH_Delete_Task+0xec>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SCH_Delete_Task+0xec>)
 8000578:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[current_index_task].pTask = NULL;
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <SCH_Delete_Task+0xec>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4619      	mov	r1, r3
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SCH_Delete_Task+0xf0>)
 8000582:	460b      	mov	r3, r1
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].Delay = 0;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <SCH_Delete_Task+0xec>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SCH_Delete_Task+0xf0>)
 8000598:	460b      	mov	r3, r1
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	440b      	add	r3, r1
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	3304      	adds	r3, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].Period = 0;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <SCH_Delete_Task+0xec>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <SCH_Delete_Task+0xf0>)
 80005b0:	460b      	mov	r3, r1
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	3308      	adds	r3, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].RunMe = 0;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <SCH_Delete_Task+0xec>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <SCH_Delete_Task+0xf0>)
 80005c8:	460b      	mov	r3, r1
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	330c      	adds	r3, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[current_index_task].TaskID = 0;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <SCH_Delete_Task+0xec>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <SCH_Delete_Task+0xf0>)
 80005e0:	460b      	mov	r3, r1
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4413      	add	r3, r2
 80005ea:	3310      	adds	r3, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
    return taskID;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b2db      	uxtb	r3, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bcb0      	pop	{r4, r5, r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200001d0 	.word	0x200001d0
 8000604:	20000108 	.word	0x20000108

08000608 <SCH_Init>:


// Initialize SCH_task
void SCH_Init(void) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
    for (int i = 0; i < SCH_MAX_TASKS; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e033      	b.n	800067c <SCH_Init+0x74>
        SCH_tasks_G[i].pTask = NULL;
 8000614:	491f      	ldr	r1, [pc, #124]	; (8000694 <SCH_Init+0x8c>)
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Delay = 0;
 8000626:	491b      	ldr	r1, [pc, #108]	; (8000694 <SCH_Init+0x8c>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	3304      	adds	r3, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Period = 0;
 800063a:	4916      	ldr	r1, [pc, #88]	; (8000694 <SCH_Init+0x8c>)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	440b      	add	r3, r1
 8000648:	3308      	adds	r3, #8
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].RunMe = 0;
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <SCH_Init+0x8c>)
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	330c      	adds	r3, #12
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[i].TaskID = 0;
 8000662:	490c      	ldr	r1, [pc, #48]	; (8000694 <SCH_Init+0x8c>)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	440b      	add	r3, r1
 8000670:	3310      	adds	r3, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SCH_MAX_TASKS; i++) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b09      	cmp	r3, #9
 8000680:	ddc8      	ble.n	8000614 <SCH_Init+0xc>
    }
    current_index_task = 0;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <SCH_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000108 	.word	0x20000108
 8000698:	200001d0 	.word	0x200001d0

0800069c <SCH_Add_Task>:


uint32_t SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
    if (current_index_task < SCH_MAX_TASKS) {
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <SCH_Add_Task+0xd0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b09      	cmp	r3, #9
 80006ae:	d856      	bhi.n	800075e <SCH_Add_Task+0xc2>
        // Initialize new task
        SCH_tasks_G[current_index_task].pTask = pFunction;
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <SCH_Add_Task+0xd0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <SCH_Add_Task+0xd4>)
 80006b8:	460b      	mov	r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Delay = DELAY / TIME_CYCLE;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <SCH_Add_Task+0xd0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4a29      	ldr	r2, [pc, #164]	; (8000774 <SCH_Add_Task+0xd8>)
 80006d0:	fba2 2303 	umull	r2, r3, r2, r3
 80006d4:	08da      	lsrs	r2, r3, #3
 80006d6:	4926      	ldr	r1, [pc, #152]	; (8000770 <SCH_Add_Task+0xd4>)
 80006d8:	4603      	mov	r3, r0
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4403      	add	r3, r0
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	3304      	adds	r3, #4
 80006e4:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].Period = PERIOD / TIME_CYCLE;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <SCH_Add_Task+0xd0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SCH_Add_Task+0xd8>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	08da      	lsrs	r2, r3, #3
 80006f6:	491e      	ldr	r1, [pc, #120]	; (8000770 <SCH_Add_Task+0xd4>)
 80006f8:	4603      	mov	r3, r0
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4403      	add	r3, r0
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	3308      	adds	r3, #8
 8000704:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[current_index_task].RunMe = 0;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <SCH_Add_Task+0xd0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <SCH_Add_Task+0xd4>)
 800070e:	460b      	mov	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	330c      	adds	r3, #12
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <SCH_Add_Task+0xd0>)
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <SCH_Add_Task+0xd0>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	4610      	mov	r0, r2
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <SCH_Add_Task+0xd4>)
 800072c:	460b      	mov	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	3310      	adds	r3, #16
 8000738:	6018      	str	r0, [r3, #0]

        current_index_task++; // Update current task index
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <SCH_Add_Task+0xd0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <SCH_Add_Task+0xd0>)
 8000744:	701a      	strb	r2, [r3, #0]

        return SCH_tasks_G[current_index_task - 1].TaskID;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <SCH_Add_Task+0xd0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <SCH_Add_Task+0xd4>)
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	440b      	add	r3, r1
 8000758:	3310      	adds	r3, #16
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	e001      	b.n	8000762 <SCH_Add_Task+0xc6>
    }
    return -1; // Add task failed
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000762:	4618      	mov	r0, r3
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	200001d0 	.word	0x200001d0
 8000770:	20000108 	.word	0x20000108
 8000774:	cccccccd 	.word	0xcccccccd

08000778 <SCH_Update>:


void SCH_Update(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	; 0x68
 800077c:	af00      	add	r7, sp, #0
    static uint32_t elapsed_time = 0;
    elapsed_time += TIME_CYCLE;
 800077e:	4b42      	ldr	r3, [pc, #264]	; (8000888 <SCH_Update+0x110>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	330a      	adds	r3, #10
 8000784:	4a40      	ldr	r2, [pc, #256]	; (8000888 <SCH_Update+0x110>)
 8000786:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < current_index_task; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	667b      	str	r3, [r7, #100]	; 0x64
 800078c:	e070      	b.n	8000870 <SCH_Update+0xf8>
        if (SCH_tasks_G[i].Delay > 0) {
 800078e:	493f      	ldr	r1, [pc, #252]	; (800088c <SCH_Update+0x114>)
 8000790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	3304      	adds	r3, #4
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d012      	beq.n	80007ca <SCH_Update+0x52>
            SCH_tasks_G[i].Delay--;
 80007a4:	4939      	ldr	r1, [pc, #228]	; (800088c <SCH_Update+0x114>)
 80007a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	3304      	adds	r3, #4
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1e59      	subs	r1, r3, #1
 80007b8:	4834      	ldr	r0, [pc, #208]	; (800088c <SCH_Update+0x114>)
 80007ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4403      	add	r3, r0
 80007c6:	3304      	adds	r3, #4
 80007c8:	6019      	str	r1, [r3, #0]
        }
        if (SCH_tasks_G[i].Delay == 0) {
 80007ca:	4930      	ldr	r1, [pc, #192]	; (800088c <SCH_Update+0x114>)
 80007cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	3304      	adds	r3, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d144      	bne.n	800086a <SCH_Update+0xf2>
            SCH_tasks_G[i].RunMe++;
 80007e0:	492a      	ldr	r1, [pc, #168]	; (800088c <SCH_Update+0x114>)
 80007e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	330c      	adds	r3, #12
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2d8      	uxtb	r0, r3
 80007f6:	4925      	ldr	r1, [pc, #148]	; (800088c <SCH_Update+0x114>)
 80007f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	440b      	add	r3, r1
 8000804:	330c      	adds	r3, #12
 8000806:	4602      	mov	r2, r0
 8000808:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period > 0) {
 800080a:	4920      	ldr	r1, [pc, #128]	; (800088c <SCH_Update+0x114>)
 800080c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	3308      	adds	r3, #8
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d011      	beq.n	8000844 <SCH_Update+0xcc>
                SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period; // Reset Delay for periodic tasks
 8000820:	491a      	ldr	r1, [pc, #104]	; (800088c <SCH_Update+0x114>)
 8000822:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	440b      	add	r3, r1
 800082e:	3308      	adds	r3, #8
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	4816      	ldr	r0, [pc, #88]	; (800088c <SCH_Update+0x114>)
 8000834:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4403      	add	r3, r0
 8000840:	3304      	adds	r3, #4
 8000842:	6019      	str	r1, [r3, #0]
            }

            // Print the elapsed time for the task update via UART
            char timestamp[100];
            sprintf(timestamp, "Task %d updated at elapsed time %lu ms\r\n", i, elapsed_time);
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <SCH_Update+0x110>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4638      	mov	r0, r7
 800084a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800084c:	4910      	ldr	r1, [pc, #64]	; (8000890 <SCH_Update+0x118>)
 800084e:	f001 ff2d 	bl	80026ac <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)timestamp, strlen(timestamp), 1000);
 8000852:	463b      	mov	r3, r7
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fc79 	bl	800014c <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	4639      	mov	r1, r7
 8000860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <SCH_Update+0x11c>)
 8000866:	f001 fd4d 	bl	8002304 <HAL_UART_Transmit>
    for (int i = 0; i < current_index_task; i++) {
 800086a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800086c:	3301      	adds	r3, #1
 800086e:	667b      	str	r3, [r7, #100]	; 0x64
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <SCH_Update+0x120>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000878:	4293      	cmp	r3, r2
 800087a:	db88      	blt.n	800078e <SCH_Update+0x16>
        }
    }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3768      	adds	r7, #104	; 0x68
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001d4 	.word	0x200001d4
 800088c:	20000108 	.word	0x20000108
 8000890:	0800303c 	.word	0x0800303c
 8000894:	200000c0 	.word	0x200000c0
 8000898:	200001d0 	.word	0x200001d0

0800089c <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
    for (int i = 0; i < current_index_task; i++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	e047      	b.n	8000938 <SCH_Dispatch_Tasks+0x9c>
        if (SCH_tasks_G[i].RunMe > 0) {
 80008a8:	4929      	ldr	r1, [pc, #164]	; (8000950 <SCH_Dispatch_Tasks+0xb4>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	330c      	adds	r3, #12
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d039      	beq.n	8000932 <SCH_Dispatch_Tasks+0x96>
            if (SCH_tasks_G[i].pTask != NULL) {
 80008be:	4924      	ldr	r1, [pc, #144]	; (8000950 <SCH_Dispatch_Tasks+0xb4>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d008      	beq.n	80008e4 <SCH_Dispatch_Tasks+0x48>
                (*SCH_tasks_G[i].pTask)(); // Execute task
 80008d2:	491f      	ldr	r1, [pc, #124]	; (8000950 <SCH_Dispatch_Tasks+0xb4>)
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	440b      	add	r3, r1
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4798      	blx	r3
            }
            SCH_tasks_G[i].RunMe--; // Decrease RunMe count
 80008e4:	491a      	ldr	r1, [pc, #104]	; (8000950 <SCH_Dispatch_Tasks+0xb4>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	4613      	mov	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	440b      	add	r3, r1
 80008f2:	330c      	adds	r3, #12
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b2d8      	uxtb	r0, r3
 80008fa:	4915      	ldr	r1, [pc, #84]	; (8000950 <SCH_Dispatch_Tasks+0xb4>)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	330c      	adds	r3, #12
 800090a:	4602      	mov	r2, r0
 800090c:	701a      	strb	r2, [r3, #0]

            // If it's a one-shot task, delete it from the list
            if (SCH_tasks_G[i].Period == 0) {
 800090e:	4910      	ldr	r1, [pc, #64]	; (8000950 <SCH_Dispatch_Tasks+0xb4>)
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	3308      	adds	r3, #8
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d106      	bne.n	8000932 <SCH_Dispatch_Tasks+0x96>
                SCH_Delete_Task(i);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fdf4 	bl	8000514 <SCH_Delete_Task>
                i--; // Adjust index to check the next task after shifting
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < current_index_task; i++) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SCH_Dispatch_Tasks+0xb8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4293      	cmp	r3, r2
 8000942:	dbb1      	blt.n	80008a8 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000108 	.word	0x20000108
 8000954:	200001d0 	.word	0x200001d0

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_MspInit+0x5c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x5c>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x5c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x5c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x60>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_MspInit+0x60>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000

080009bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009cc:	d113      	bne.n	80009f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	201c      	movs	r0, #28
 80009ec:	f000 fa69 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f0:	201c      	movs	r0, #28
 80009f2:	f000 fa82 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d12f      	bne.n	8000a84 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2e:	61d3      	str	r3, [r2, #28]
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a54:	2304      	movs	r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <HAL_UART_MspInit+0x90>)
 8000a68:	f000 fa62 	bl	8000f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_UART_MspInit+0x90>)
 8000a80:	f000 fa56 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010800 	.word	0x40010800

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f8fd 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM2_IRQHandler+0x10>)
 8000aee:	f001 f879 	bl	8001be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000078 	.word	0x20000078

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f001 fde6 	bl	80026fc <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20002800 	.word	0x20002800
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	200001d8 	.word	0x200001d8
 8000b64:	20000330 	.word	0x20000330

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <setTimer0>:
// Initialize timer counter variables and flags
int timer0_counter = 0;
int timer0_flag = 0;

// Define initialization function for timers
void setTimer0(int duration) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIME_CYCLE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <setTimer0+0x2c>)
 8000b80:	fb82 1203 	smull	r1, r2, r2, r3
 8000b84:	1092      	asrs	r2, r2, #2
 8000b86:	17db      	asrs	r3, r3, #31
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <setTimer0+0x30>)
 8000b8c:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <setTimer0+0x34>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	66666667 	.word	0x66666667
 8000ba4:	200001dc 	.word	0x200001dc
 8000ba8:	200001e0 	.word	0x200001e0

08000bac <timer_run>:

// Run all counters, called in each interrupt cycle
void timer_run() {
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <timer_run+0x2c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dd0b      	ble.n	8000bd0 <timer_run+0x24>
        timer0_counter--;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <timer_run+0x2c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <timer_run+0x2c>)
 8000bc0:	6013      	str	r3, [r2, #0]
        if (timer0_counter <= 0) timer0_flag = 1;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <timer_run+0x2c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dc02      	bgt.n	8000bd0 <timer_run+0x24>
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <timer_run+0x30>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
    }
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	200001dc 	.word	0x200001dc
 8000bdc:	200001e0 	.word	0x200001e0

08000be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) { // Check the correct timer instance
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf0:	d103      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x1a>
        SCH_Update();    // Update Scheduler on each interrupt
 8000bf2:	f7ff fdc1 	bl	8000778 <SCH_Update>
        timer_run();     // Run all timer counters
 8000bf6:	f7ff ffd9 	bl	8000bac <timer_run>
    }
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <Reset_Handler>:
 8000c04:	f7ff ffb0 	bl	8000b68 <SystemInit>
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <LoopFillZerobss+0xe>)
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <LoopFillZerobss+0x16>)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:
 8000c12:	58d4      	ldr	r4, [r2, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:
 8000c18:	18c4      	adds	r4, r0, r3
 8000c1a:	428c      	cmp	r4, r1
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <LoopFillZerobss+0x1a>)
 8000c20:	4c09      	ldr	r4, [pc, #36]	; (8000c48 <LoopFillZerobss+0x1e>)
 8000c22:	2300      	movs	r3, #0
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:
 8000c2a:	42a2      	cmp	r2, r4
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>
 8000c2e:	f001 fd6b 	bl	8002708 <__libc_init_array>
 8000c32:	f7ff fa93 	bl	800015c <main>
 8000c36:	4770      	bx	lr
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	2000005c 	.word	0x2000005c
 8000c40:	080030d0 	.word	0x080030d0
 8000c44:	2000005c 	.word	0x2000005c
 8000c48:	20000330 	.word	0x20000330

08000c4c <ADC1_2_IRQHandler>:
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f923 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>
 8000c6c:	f7ff fe74 	bl	8000958 <HAL_MspInit>
 8000c70:	2300      	movs	r3, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f93b 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f903 	bl	8000ec2 <HAL_NVIC_SetPriority>
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200001e4 	.word	0x200001e4

08000d00 <HAL_GetTick>:
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	200001e4 	.word	0x200001e4

08000d14 <__NVIC_SetPriorityGrouping>:
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
 8000f30:	b480      	push	{r7}
 8000f32:	b08b      	sub	sp, #44	; 0x2c
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
 8000f42:	e161      	b.n	8001208 <HAL_GPIO_Init+0x2d8>
 8000f44:	2201      	movs	r2, #1
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8150 	bne.w	8001202 <HAL_GPIO_Init+0x2d2>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a97      	ldr	r2, [pc, #604]	; (80011c4 <HAL_GPIO_Init+0x294>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d05e      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f6c:	4a95      	ldr	r2, [pc, #596]	; (80011c4 <HAL_GPIO_Init+0x294>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d875      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f72:	4a95      	ldr	r2, [pc, #596]	; (80011c8 <HAL_GPIO_Init+0x298>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d058      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f78:	4a93      	ldr	r2, [pc, #588]	; (80011c8 <HAL_GPIO_Init+0x298>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d86f      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f7e:	4a93      	ldr	r2, [pc, #588]	; (80011cc <HAL_GPIO_Init+0x29c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d052      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f84:	4a91      	ldr	r2, [pc, #580]	; (80011cc <HAL_GPIO_Init+0x29c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d869      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f8a:	4a91      	ldr	r2, [pc, #580]	; (80011d0 <HAL_GPIO_Init+0x2a0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d04c      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f90:	4a8f      	ldr	r2, [pc, #572]	; (80011d0 <HAL_GPIO_Init+0x2a0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d863      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f96:	4a8f      	ldr	r2, [pc, #572]	; (80011d4 <HAL_GPIO_Init+0x2a4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d046      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f9c:	4a8d      	ldr	r2, [pc, #564]	; (80011d4 <HAL_GPIO_Init+0x2a4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d85d      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d82a      	bhi.n	8000ffc <HAL_GPIO_Init+0xcc>
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d859      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <HAL_GPIO_Init+0x80>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	0800102b 	.word	0x0800102b
 8000fb4:	08001005 	.word	0x08001005
 8000fb8:	08001017 	.word	0x08001017
 8000fbc:	08001059 	.word	0x08001059
 8000fc0:	0800105f 	.word	0x0800105f
 8000fc4:	0800105f 	.word	0x0800105f
 8000fc8:	0800105f 	.word	0x0800105f
 8000fcc:	0800105f 	.word	0x0800105f
 8000fd0:	0800105f 	.word	0x0800105f
 8000fd4:	0800105f 	.word	0x0800105f
 8000fd8:	0800105f 	.word	0x0800105f
 8000fdc:	0800105f 	.word	0x0800105f
 8000fe0:	0800105f 	.word	0x0800105f
 8000fe4:	0800105f 	.word	0x0800105f
 8000fe8:	0800105f 	.word	0x0800105f
 8000fec:	0800105f 	.word	0x0800105f
 8000ff0:	0800105f 	.word	0x0800105f
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	4a76      	ldr	r2, [pc, #472]	; (80011d8 <HAL_GPIO_Init+0x2a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8001002:	e02c      	b.n	800105e <HAL_GPIO_Init+0x12e>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	e029      	b.n	8001060 <HAL_GPIO_Init+0x130>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	3304      	adds	r3, #4
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	e024      	b.n	8001060 <HAL_GPIO_Init+0x130>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	e01f      	b.n	8001060 <HAL_GPIO_Init+0x130>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	330c      	adds	r3, #12
 8001026:	623b      	str	r3, [r7, #32]
 8001028:	e01a      	b.n	8001060 <HAL_GPIO_Init+0x130>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_GPIO_Init+0x108>
 8001032:	2304      	movs	r3, #4
 8001034:	623b      	str	r3, [r7, #32]
 8001036:	e013      	b.n	8001060 <HAL_GPIO_Init+0x130>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d105      	bne.n	800104c <HAL_GPIO_Init+0x11c>
 8001040:	2308      	movs	r3, #8
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	e009      	b.n	8001060 <HAL_GPIO_Init+0x130>
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	e003      	b.n	8001060 <HAL_GPIO_Init+0x130>
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x130>
 800105e:	bf00      	nop
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	; 0xff
 8001064:	d801      	bhi.n	800106a <HAL_GPIO_Init+0x13a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e001      	b.n	800106e <HAL_GPIO_Init+0x13e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3304      	adds	r3, #4
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d802      	bhi.n	800107c <HAL_GPIO_Init+0x14c>
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x152>
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	3b08      	subs	r3, #8
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	210f      	movs	r1, #15
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	6a39      	ldr	r1, [r7, #32]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 80a9 	beq.w	8001202 <HAL_GPIO_Init+0x2d2>
 80010b0:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <HAL_GPIO_Init+0x2ac>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_GPIO_Init+0x2ac>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2ac>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <HAL_GPIO_Init+0x2b0>)
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <HAL_GPIO_Init+0x2b4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1e0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3c      	ldr	r2, [pc, #240]	; (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1dc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3b      	ldr	r2, [pc, #236]	; (80011ec <HAL_GPIO_Init+0x2bc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1d8>
 8001104:	2302      	movs	r3, #2
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 8001108:	2303      	movs	r3, #3
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 8001110:	2300      	movs	r3, #0
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x2b0>)
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	492b      	ldr	r1, [pc, #172]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	43db      	mvns	r3, r3
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 8001154:	4013      	ands	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_GPIO_Init+0x242>
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	4921      	ldr	r1, [pc, #132]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	60cb      	str	r3, [r1, #12]
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x250>
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	43db      	mvns	r3, r3
 800117a:	491d      	ldr	r1, [pc, #116]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 800117c:	4013      	ands	r3, r2
 800117e:	60cb      	str	r3, [r1, #12]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_GPIO_Init+0x26a>
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4917      	ldr	r1, [pc, #92]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x278>
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4913      	ldr	r1, [pc, #76]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01f      	beq.n	80011f4 <HAL_GPIO_Init+0x2c4>
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	490d      	ldr	r1, [pc, #52]	; (80011f0 <HAL_GPIO_Init+0x2c0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
 80011c0:	e01f      	b.n	8001202 <HAL_GPIO_Init+0x2d2>
 80011c2:	bf00      	nop
 80011c4:	10320000 	.word	0x10320000
 80011c8:	10310000 	.word	0x10310000
 80011cc:	10220000 	.word	0x10220000
 80011d0:	10210000 	.word	0x10210000
 80011d4:	10120000 	.word	0x10120000
 80011d8:	10110000 	.word	0x10110000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010000 	.word	0x40010000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40011000 	.word	0x40011000
 80011f0:	40010400 	.word	0x40010400
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_GPIO_Init+0x2f4>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4909      	ldr	r1, [pc, #36]	; (8001224 <HAL_GPIO_Init+0x2f4>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	fa22 f303 	lsr.w	r3, r2, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	f47f ae96 	bne.w	8000f44 <HAL_GPIO_Init+0x14>
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	372c      	adds	r7, #44	; 0x2c
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_WritePin>:
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_TogglePin>:
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43d9      	mvns	r1, r3
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	400b      	ands	r3, r1
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
	...

0800128c <HAL_RCC_OscConfig>:
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
 800129a:	2301      	movs	r3, #1
 800129c:	e272      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8087 	beq.w	80013ba <HAL_RCC_OscConfig+0x12e>
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d00c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x46>
 80012b8:	4b8f      	ldr	r3, [pc, #572]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d112      	bne.n	80012ea <HAL_RCC_OscConfig+0x5e>
 80012c4:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d10b      	bne.n	80012ea <HAL_RCC_OscConfig+0x5e>
 80012d2:	4b89      	ldr	r3, [pc, #548]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x12c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d168      	bne.n	80013b8 <HAL_RCC_OscConfig+0x12c>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e24c      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x76>
 80012f4:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a7f      	ldr	r2, [pc, #508]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e02e      	b.n	8001360 <HAL_RCC_OscConfig+0xd4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b7b      	ldr	r3, [pc, #492]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a77      	ldr	r2, [pc, #476]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0xd4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0xbc>
 800132e:	4b72      	ldr	r3, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a71      	ldr	r2, [pc, #452]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b6f      	ldr	r3, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6e      	ldr	r2, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0xd4>
 8001348:	4b6b      	ldr	r3, [pc, #428]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a67      	ldr	r2, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x104>
 8001368:	f7ff fcca 	bl	8000d00 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xf6>
 8001370:	f7ff fcc6 	bl	8000d00 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xf6>
 800137e:	2303      	movs	r3, #3
 8001380:	e200      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0xe4>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x12e>
 8001390:	f7ff fcb6 	bl	8000d00 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x11e>
 8001398:	f7ff fcb2 	bl	8000d00 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x11e>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1ec      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x10c>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x12e>
 80013b8:	bf00      	nop
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d063      	beq.n	800148e <HAL_RCC_OscConfig+0x202>
 80013c6:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <HAL_RCC_OscConfig+0x15e>
 80013d2:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d11c      	bne.n	8001418 <HAL_RCC_OscConfig+0x18c>
 80013de:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d116      	bne.n	8001418 <HAL_RCC_OscConfig+0x18c>
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x176>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x176>
 80013fe:	2301      	movs	r3, #1
 8001400:	e1c0      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4939      	ldr	r1, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
 8001416:	e03a      	b.n	800148e <HAL_RCC_OscConfig+0x202>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_OscConfig+0x1d6>
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x270>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f7ff fc6b 	bl	8000d00 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x1b4>
 800142e:	f7ff fc67 	bl	8000d00 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x1b4>
 800143c:	2303      	movs	r3, #3
 800143e:	e1a1      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x1a2>
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4927      	ldr	r1, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800145c:	4313      	orrs	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
 8001460:	e015      	b.n	800148e <HAL_RCC_OscConfig+0x202>
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x270>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f7ff fc4a 	bl	8000d00 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x1f6>
 8001470:	f7ff fc46 	bl	8000d00 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x1f6>
 800147e:	2303      	movs	r3, #3
 8001480:	e180      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x1e4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d03a      	beq.n	8001510 <HAL_RCC_OscConfig+0x284>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d019      	beq.n	80014d6 <HAL_RCC_OscConfig+0x24a>
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_RCC_OscConfig+0x274>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f7ff fc2a 	bl	8000d00 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x236>
 80014b0:	f7ff fc26 	bl	8000d00 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x236>
 80014be:	2303      	movs	r3, #3
 80014c0:	e160      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x224>
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 face 	bl	8001a70 <RCC_Delay>
 80014d4:	e01c      	b.n	8001510 <HAL_RCC_OscConfig+0x284>
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_RCC_OscConfig+0x274>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	f7ff fc10 	bl	8000d00 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]
 80014e2:	e00f      	b.n	8001504 <HAL_RCC_OscConfig+0x278>
 80014e4:	f7ff fc0c 	bl	8000d00 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d908      	bls.n	8001504 <HAL_RCC_OscConfig+0x278>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e146      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	42420000 	.word	0x42420000
 8001500:	42420480 	.word	0x42420480
 8001504:	4b92      	ldr	r3, [pc, #584]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e9      	bne.n	80014e4 <HAL_RCC_OscConfig+0x258>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a6 	beq.w	800166a <HAL_RCC_OscConfig+0x3de>
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
 8001522:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10d      	bne.n	800154a <HAL_RCC_OscConfig+0x2be>
 800152e:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a87      	ldr	r2, [pc, #540]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
 800154a:	4b82      	ldr	r3, [pc, #520]	; (8001754 <HAL_RCC_OscConfig+0x4c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x2fc>
 8001556:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0x4c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7e      	ldr	r2, [pc, #504]	; (8001754 <HAL_RCC_OscConfig+0x4c8>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	f7ff fbcd 	bl	8000d00 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2f0>
 800156a:	f7ff fbc9 	bl	8000d00 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	; 0x64
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2f0>
 8001578:	2303      	movs	r3, #3
 800157a:	e103      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 800157c:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4c8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2de>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x312>
 8001590:	4b6f      	ldr	r3, [pc, #444]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a6e      	ldr	r2, [pc, #440]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
 800159c:	e02d      	b.n	80015fa <HAL_RCC_OscConfig+0x36e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x334>
 80015a6:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a69      	ldr	r2, [pc, #420]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a66      	ldr	r2, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	e01c      	b.n	80015fa <HAL_RCC_OscConfig+0x36e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x356>
 80015c8:	4b61      	ldr	r3, [pc, #388]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a60      	ldr	r2, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a5d      	ldr	r2, [pc, #372]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e00b      	b.n	80015fa <HAL_RCC_OscConfig+0x36e>
 80015e2:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a5a      	ldr	r2, [pc, #360]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	4b58      	ldr	r3, [pc, #352]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a57      	ldr	r2, [pc, #348]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d015      	beq.n	800162e <HAL_RCC_OscConfig+0x3a2>
 8001602:	f7ff fb7d 	bl	8000d00 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x394>
 800160a:	f7ff fb79 	bl	8000d00 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x394>
 800161c:	2303      	movs	r3, #3
 800161e:	e0b1      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001620:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ee      	beq.n	800160a <HAL_RCC_OscConfig+0x37e>
 800162c:	e014      	b.n	8001658 <HAL_RCC_OscConfig+0x3cc>
 800162e:	f7ff fb67 	bl	8000d00 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
 8001636:	f7ff fb63 	bl	8000d00 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3c0>
 8001648:	2303      	movs	r3, #3
 800164a:	e09b      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 800164c:	4b40      	ldr	r3, [pc, #256]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1ee      	bne.n	8001636 <HAL_RCC_OscConfig+0x3aa>
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d105      	bne.n	800166a <HAL_RCC_OscConfig+0x3de>
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a3b      	ldr	r2, [pc, #236]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8087 	beq.w	8001782 <HAL_RCC_OscConfig+0x4f6>
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d061      	beq.n	8001744 <HAL_RCC_OscConfig+0x4b8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d146      	bne.n	8001716 <HAL_RCC_OscConfig+0x48a>
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x4cc>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f7ff fb37 	bl	8000d00 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x41c>
 8001696:	f7ff fb33 	bl	8000d00 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x41c>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e06d      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x40a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d108      	bne.n	80016d0 <HAL_RCC_OscConfig+0x444>
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4921      	ldr	r1, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a19      	ldr	r1, [r3, #32]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	430b      	orrs	r3, r1
 80016e2:	491b      	ldr	r1, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x4cc>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f7ff fb07 	bl	8000d00 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x47c>
 80016f6:	f7ff fb03 	bl	8000d00 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x47c>
 8001704:	2303      	movs	r3, #3
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46a>
 8001714:	e035      	b.n	8001782 <HAL_RCC_OscConfig+0x4f6>
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_OscConfig+0x4cc>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f7ff faf0 	bl	8000d00 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x4aa>
 8001724:	f7ff faec 	bl	8000d00 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x4aa>
 8001732:	2303      	movs	r3, #3
 8001734:	e026      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x498>
 8001742:	e01e      	b.n	8001782 <HAL_RCC_OscConfig+0x4f6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x4d0>
 800174c:	2301      	movs	r3, #1
 800174e:	e019      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
 8001758:	42420060 	.word	0x42420060
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x500>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	429a      	cmp	r2, r3
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x4f2>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x4f6>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x4f8>
 8001782:	2300      	movs	r3, #0
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_RCC_ClockConfig>:
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0d0      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d910      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x44>
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	4965      	ldr	r1, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x44>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x92>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x68>
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017f6:	6053      	str	r3, [r2, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x80>
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800180e:	6053      	str	r3, [r2, #4]
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d040      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xb6>
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d115      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
 800185a:	2301      	movs	r3, #1
 800185c:	e073      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
 800186a:	2301      	movs	r3, #1
 800186c:	e06b      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4936      	ldr	r1, [pc, #216]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	f7ff fa3e 	bl	8000d00 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
 8001888:	f7ff fa3a 	bl	8000d00 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
 800189a:	2303      	movs	r3, #3
 800189c:	e053      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d210      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x150>
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0207 	bic.w	r2, r3, #7
 80018c6:	4922      	ldr	r1, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x150>
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x16e>
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x18e>
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1cc>)
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f99c 	bl	8000c7c <HAL_InitTick>
 8001944:	2300      	movs	r3, #0
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000
 8001954:	40021000 	.word	0x40021000
 8001958:	08003068 	.word	0x08003068
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b04      	cmp	r3, #4
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x30>
 800198e:	2b08      	cmp	r3, #8
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x36>
 8001992:	e027      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x80>
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e027      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x86>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d010      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x70>
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	0c5b      	lsrs	r3, r3, #17
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_RCC_GetSysClockFreq+0x98>)
 80019c6:	fb03 f202 	mul.w	r2, r3, r2
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e004      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x7a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e002      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x86>
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetSysClockFreq+0x98>)
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	bf00      	nop
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	08003080 	.word	0x08003080
 8001a04:	08003090 	.word	0x08003090
 8001a08:	003d0900 	.word	0x003d0900

08001a0c <HAL_RCC_GetHCLKFreq>:
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	20000000 	.word	0x20000000

08001a20 <HAL_RCC_GetPCLK1Freq>:
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	f7ff fff2 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08003078 	.word	0x08003078

08001a48 <HAL_RCC_GetPCLK2Freq>:
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	f7ff ffde 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	0adb      	lsrs	r3, r3, #11
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08003078 	.word	0x08003078

08001a70 <RCC_Delay>:
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <RCC_Delay+0x34>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <RCC_Delay+0x38>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0a5b      	lsrs	r3, r3, #9
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	bf00      	nop
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	60fa      	str	r2, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f9      	bne.n	8001a8c <RCC_Delay+0x1c>
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	10624dd3 	.word	0x10624dd3

08001aac <HAL_TIM_Base_Init>:
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_TIM_Base_Init+0x12>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e041      	b.n	8001b42 <HAL_TIM_Base_Init+0x96>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_TIM_Base_Init+0x2c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe ff72 	bl	80009bc <HAL_TIM_Base_MspInit>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f000 fa56 	bl	8001f9c <TIM_Base_SetConfig>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001b40:	2300      	movs	r3, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_TIM_Base_Start_IT>:
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d001      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e035      	b.n	8001bd0 <HAL_TIM_Base_Start_IT+0x84>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <HAL_TIM_Base_Start_IT+0x90>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x4e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8e:	d004      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x4e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_TIM_Base_Start_IT+0x94>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d111      	bne.n	8001bbe <HAL_TIM_Base_Start_IT+0x72>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d010      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x82>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_TIM_Base_Start_IT+0x82>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40000400 	.word	0x40000400

08001be4 <HAL_TIM_IRQHandler>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d020      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x64>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x64>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0202 	mvn.w	r2, #2
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	771a      	strb	r2, [r3, #28]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x52>
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f998 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x5e>
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f98b 	bl	8001f52 <HAL_TIM_OC_DelayElapsedCallback>
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f99a 	bl	8001f76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0204 	mvn.w	r2, #4
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	771a      	strb	r2, [r3, #28]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x9e>
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f972 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xaa>
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f965 	bl	8001f52 <HAL_TIM_OC_DelayElapsedCallback>
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f974 	bl	8001f76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0xfc>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0xfc>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0208 	mvn.w	r2, #8
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	771a      	strb	r2, [r3, #28]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0xea>
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f94c 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xf6>
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f93f 	bl	8001f52 <HAL_TIM_OC_DelayElapsedCallback>
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f94e 	bl	8001f76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x148>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x148>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0210 	mvn.w	r2, #16
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2208      	movs	r2, #8
 8001d02:	771a      	strb	r2, [r3, #28]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x136>
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f926 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0x142>
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f919 	bl	8001f52 <HAL_TIM_OC_DelayElapsedCallback>
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f928 	bl	8001f76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x16c>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x16c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0201 	mvn.w	r2, #1
 8001d48:	611a      	str	r2, [r3, #16]
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe ff48 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x190>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x190>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fa6f 	bl	8002252 <HAL_TIMEx_BreakCallback>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x1b4>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x1b4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8f8 	bl	8001f88 <HAL_TIM_TriggerCallback>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x1d8>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x1d8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0220 	mvn.w	r2, #32
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fa42 	bl	8002240 <HAL_TIMEx_CommutCallback>
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_ConfigClockSource>:
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_TIM_ConfigClockSource+0x1c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0b4      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x186>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e18:	d03e      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0xd4>
 8001e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1e:	f200 8087 	bhi.w	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e26:	f000 8086 	beq.w	8001f36 <HAL_TIM_ConfigClockSource+0x172>
 8001e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2e:	d87f      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e30:	2b70      	cmp	r3, #112	; 0x70
 8001e32:	d01a      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0xa6>
 8001e34:	2b70      	cmp	r3, #112	; 0x70
 8001e36:	d87b      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e38:	2b60      	cmp	r3, #96	; 0x60
 8001e3a:	d050      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x11a>
 8001e3c:	2b60      	cmp	r3, #96	; 0x60
 8001e3e:	d877      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e40:	2b50      	cmp	r3, #80	; 0x50
 8001e42:	d03c      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0xfa>
 8001e44:	2b50      	cmp	r3, #80	; 0x50
 8001e46:	d873      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d058      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x13a>
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d86f      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b30      	cmp	r3, #48	; 0x30
 8001e52:	d064      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x15a>
 8001e54:	2b30      	cmp	r3, #48	; 0x30
 8001e56:	d86b      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d060      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x15a>
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d867      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05c      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x15a>
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d05a      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x15a>
 8001e68:	e062      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x16c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f000 f96a 	bl	8002152 <TIM_ETR_SetConfig>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e04f      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f000 f953 	bl	8002152 <TIM_ETR_SetConfig>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e03c      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f000 f8ca 	bl	8002064 <TIM_TI1_ConfigInputStage>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2150      	movs	r1, #80	; 0x50
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f921 	bl	800211e <TIM_ITRx_SetConfig>
 8001edc:	e02c      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f000 f8e8 	bl	80020c0 <TIM_TI2_ConfigInputStage>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2160      	movs	r1, #96	; 0x60
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f911 	bl	800211e <TIM_ITRx_SetConfig>
 8001efc:	e01c      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f000 f8aa 	bl	8002064 <TIM_TI1_ConfigInputStage>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2140      	movs	r1, #64	; 0x40
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f901 	bl	800211e <TIM_ITRx_SetConfig>
 8001f1c:	e00c      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f000 f8f8 	bl	800211e <TIM_ITRx_SetConfig>
 8001f2e:	e003      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e000      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x174>
 8001f36:	bf00      	nop
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_TIM_OC_DelayElapsedCallback>:
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_IC_CaptureCallback>:
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_TriggerCallback>:
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <TIM_Base_SetConfig>:
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a2b      	ldr	r2, [pc, #172]	; (800205c <TIM_Base_SetConfig+0xc0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x28>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x28>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a28      	ldr	r2, [pc, #160]	; (8002060 <TIM_Base_SetConfig+0xc4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x3a>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <TIM_Base_SetConfig+0xc0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x52>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x52>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <TIM_Base_SetConfig+0xc4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x64>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0d      	ldr	r2, [pc, #52]	; (800205c <TIM_Base_SetConfig+0xc0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0x98>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <TIM_Base_SetConfig+0xb6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f023 0201 	bic.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40000400 	.word	0x40000400

08002064 <TIM_TI1_ConfigInputStage>:
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f023 0201 	bic.w	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	621a      	str	r2, [r3, #32]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f023 030a 	bic.w	r3, r3, #10
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	619a      	str	r2, [r3, #24]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	621a      	str	r2, [r3, #32]
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <TIM_TI2_ConfigInputStage>:
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f023 0210 	bic.w	r2, r3, #16
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	621a      	str	r2, [r3, #32]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	031b      	lsls	r3, r3, #12
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	619a      	str	r2, [r3, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	621a      	str	r2, [r3, #32]
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <TIM_ITRx_SetConfig>:
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	f043 0307 	orr.w	r3, r3, #7
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <TIM_ETR_SetConfig>:
 8002152:	b480      	push	{r7}
 8002154:	b087      	sub	sp, #28
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	021a      	lsls	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4313      	orrs	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_MasterConfigSynchronization>:
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e041      	b.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d004      	beq.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d10c      	bne.n	800221a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4313      	orrs	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800222a:	2300      	movs	r3, #0
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400

08002240 <HAL_TIMEx_CommutCallback>:
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_TIMEx_BreakCallback>:
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_UART_Init>:
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_UART_Init+0x98>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fbba 	bl	8000a04 <HAL_UART_MspInit>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f971 	bl	8002590 <UART_SetConfig>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
 80022fa:	2300      	movs	r3, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_Transmit>:
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d175      	bne.n	8002410 <HAL_UART_Transmit+0x10c>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_UART_Transmit+0x2c>
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x30>
 8002330:	2301      	movs	r3, #1
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x10e>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	; 0x21
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002342:	f7fe fcdd 	bl	8000d00 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	849a      	strh	r2, [r3, #36]	; 0x24
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	84da      	strh	r2, [r3, #38]	; 0x26
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	d108      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e003      	b.n	8002378 <HAL_UART_Transmit+0x74>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e02e      	b.n	80023d8 <HAL_UART_Transmit+0xd4>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f848 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_Transmit+0x98>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002398:	2303      	movs	r3, #3
 800239a:	e03a      	b.n	8002412 <HAL_UART_Transmit+0x10e>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_UART_Transmit+0xb6>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3302      	adds	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e007      	b.n	80023ca <HAL_UART_Transmit+0xc6>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	84da      	strh	r2, [r3, #38]	; 0x26
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cb      	bne.n	800237a <HAL_UART_Transmit+0x76>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f814 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_Transmit+0x100>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x10e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x10e>
 8002410:	2302      	movs	r3, #2
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_WaitOnFlagUntilTimeout>:
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	e03b      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d037      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002434:	f7fe fc64 	bl	8000d00 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <UART_WaitOnFlagUntilTimeout+0x30>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <UART_WaitOnFlagUntilTimeout+0x34>
 800244a:	2303      	movs	r3, #3
 800244c:	e03a      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b80      	cmp	r3, #128	; 0x80
 8002460:	d020      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d01d      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d116      	bne.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f81d 	bl	80024cc <UART_EndRxTransfer>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2208      	movs	r2, #8
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a0:	2301      	movs	r3, #1
 80024a2:	e00f      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d0b4      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x12>
 80024c2:	2300      	movs	r3, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_EndRxTransfer>:
 80024cc:	b480      	push	{r7}
 80024ce:	b095      	sub	sp, #84	; 0x54
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f4:	643a      	str	r2, [r7, #64]	; 0x40
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <UART_EndRxTransfer+0x8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3314      	adds	r3, #20
 8002526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
 800252c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e5      	bne.n	8002508 <UART_EndRxTransfer+0x3c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <UART_EndRxTransfer+0xac>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0310 	bic.w	r3, r3, #16
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002564:	61ba      	str	r2, [r7, #24]
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	6979      	ldr	r1, [r7, #20]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_EndRxTransfer+0x78>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
 8002586:	bf00      	nop
 8002588:	3754      	adds	r7, #84	; 0x54
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <UART_SetConfig>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ca:	f023 030c 	bic.w	r3, r3, #12
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	60d3      	str	r3, [r2, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	615a      	str	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <UART_SetConfig+0x114>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d103      	bne.n	8002600 <UART_SetConfig+0x70>
 80025f8:	f7ff fa26 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	e002      	b.n	8002606 <UART_SetConfig+0x76>
 8002600:	f7ff fa0e 	bl	8001a20 <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <UART_SetConfig+0x118>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	0119      	lsls	r1, r3, #4
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <UART_SetConfig+0x118>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <UART_SetConfig+0x118>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265c:	4419      	add	r1, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <UART_SetConfig+0x118>)
 8002676:	fba3 0302 	umull	r0, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	; 0x32
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <UART_SetConfig+0x118>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	440a      	add	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013800 	.word	0x40013800
 80026a8:	51eb851f 	.word	0x51eb851f

080026ac <siprintf>:
 80026ac:	b40e      	push	{r1, r2, r3}
 80026ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026b2:	b500      	push	{lr}
 80026b4:	b09c      	sub	sp, #112	; 0x70
 80026b6:	ab1d      	add	r3, sp, #116	; 0x74
 80026b8:	9002      	str	r0, [sp, #8]
 80026ba:	9006      	str	r0, [sp, #24]
 80026bc:	9107      	str	r1, [sp, #28]
 80026be:	9104      	str	r1, [sp, #16]
 80026c0:	4808      	ldr	r0, [pc, #32]	; (80026e4 <siprintf+0x38>)
 80026c2:	4909      	ldr	r1, [pc, #36]	; (80026e8 <siprintf+0x3c>)
 80026c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026c8:	9105      	str	r1, [sp, #20]
 80026ca:	6800      	ldr	r0, [r0, #0]
 80026cc:	a902      	add	r1, sp, #8
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	f000 f98e 	bl	80029f0 <_svfiprintf_r>
 80026d4:	2200      	movs	r2, #0
 80026d6:	9b02      	ldr	r3, [sp, #8]
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	b01c      	add	sp, #112	; 0x70
 80026dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80026e0:	b003      	add	sp, #12
 80026e2:	4770      	bx	lr
 80026e4:	20000058 	.word	0x20000058
 80026e8:	ffff0208 	.word	0xffff0208

080026ec <memset>:
 80026ec:	4603      	mov	r3, r0
 80026ee:	4402      	add	r2, r0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d100      	bne.n	80026f6 <memset+0xa>
 80026f4:	4770      	bx	lr
 80026f6:	f803 1b01 	strb.w	r1, [r3], #1
 80026fa:	e7f9      	b.n	80026f0 <memset+0x4>

080026fc <__errno>:
 80026fc:	4b01      	ldr	r3, [pc, #4]	; (8002704 <__errno+0x8>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000058 	.word	0x20000058

08002708 <__libc_init_array>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	2600      	movs	r6, #0
 800270c:	4d0c      	ldr	r5, [pc, #48]	; (8002740 <__libc_init_array+0x38>)
 800270e:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <__libc_init_array+0x3c>)
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	42a6      	cmp	r6, r4
 8002716:	d109      	bne.n	800272c <__libc_init_array+0x24>
 8002718:	f000 fc7a 	bl	8003010 <_init>
 800271c:	2600      	movs	r6, #0
 800271e:	4d0a      	ldr	r5, [pc, #40]	; (8002748 <__libc_init_array+0x40>)
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <__libc_init_array+0x44>)
 8002722:	1b64      	subs	r4, r4, r5
 8002724:	10a4      	asrs	r4, r4, #2
 8002726:	42a6      	cmp	r6, r4
 8002728:	d105      	bne.n	8002736 <__libc_init_array+0x2e>
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002730:	4798      	blx	r3
 8002732:	3601      	adds	r6, #1
 8002734:	e7ee      	b.n	8002714 <__libc_init_array+0xc>
 8002736:	f855 3b04 	ldr.w	r3, [r5], #4
 800273a:	4798      	blx	r3
 800273c:	3601      	adds	r6, #1
 800273e:	e7f2      	b.n	8002726 <__libc_init_array+0x1e>
 8002740:	080030c8 	.word	0x080030c8
 8002744:	080030c8 	.word	0x080030c8
 8002748:	080030c8 	.word	0x080030c8
 800274c:	080030cc 	.word	0x080030cc

08002750 <__retarget_lock_acquire_recursive>:
 8002750:	4770      	bx	lr

08002752 <__retarget_lock_release_recursive>:
 8002752:	4770      	bx	lr

08002754 <_free_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4605      	mov	r5, r0
 8002758:	2900      	cmp	r1, #0
 800275a:	d040      	beq.n	80027de <_free_r+0x8a>
 800275c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002760:	1f0c      	subs	r4, r1, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	bfb8      	it	lt
 8002766:	18e4      	addlt	r4, r4, r3
 8002768:	f000 f8dc 	bl	8002924 <__malloc_lock>
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <_free_r+0x8c>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	b933      	cbnz	r3, 8002780 <_free_r+0x2c>
 8002772:	6063      	str	r3, [r4, #4]
 8002774:	6014      	str	r4, [r2, #0]
 8002776:	4628      	mov	r0, r5
 8002778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800277c:	f000 b8d8 	b.w	8002930 <__malloc_unlock>
 8002780:	42a3      	cmp	r3, r4
 8002782:	d908      	bls.n	8002796 <_free_r+0x42>
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	1821      	adds	r1, r4, r0
 8002788:	428b      	cmp	r3, r1
 800278a:	bf01      	itttt	eq
 800278c:	6819      	ldreq	r1, [r3, #0]
 800278e:	685b      	ldreq	r3, [r3, #4]
 8002790:	1809      	addeq	r1, r1, r0
 8002792:	6021      	streq	r1, [r4, #0]
 8002794:	e7ed      	b.n	8002772 <_free_r+0x1e>
 8002796:	461a      	mov	r2, r3
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b10b      	cbz	r3, 80027a0 <_free_r+0x4c>
 800279c:	42a3      	cmp	r3, r4
 800279e:	d9fa      	bls.n	8002796 <_free_r+0x42>
 80027a0:	6811      	ldr	r1, [r2, #0]
 80027a2:	1850      	adds	r0, r2, r1
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	d10b      	bne.n	80027c0 <_free_r+0x6c>
 80027a8:	6820      	ldr	r0, [r4, #0]
 80027aa:	4401      	add	r1, r0
 80027ac:	1850      	adds	r0, r2, r1
 80027ae:	4283      	cmp	r3, r0
 80027b0:	6011      	str	r1, [r2, #0]
 80027b2:	d1e0      	bne.n	8002776 <_free_r+0x22>
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4408      	add	r0, r1
 80027ba:	6010      	str	r0, [r2, #0]
 80027bc:	6053      	str	r3, [r2, #4]
 80027be:	e7da      	b.n	8002776 <_free_r+0x22>
 80027c0:	d902      	bls.n	80027c8 <_free_r+0x74>
 80027c2:	230c      	movs	r3, #12
 80027c4:	602b      	str	r3, [r5, #0]
 80027c6:	e7d6      	b.n	8002776 <_free_r+0x22>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	1821      	adds	r1, r4, r0
 80027cc:	428b      	cmp	r3, r1
 80027ce:	bf01      	itttt	eq
 80027d0:	6819      	ldreq	r1, [r3, #0]
 80027d2:	685b      	ldreq	r3, [r3, #4]
 80027d4:	1809      	addeq	r1, r1, r0
 80027d6:	6021      	streq	r1, [r4, #0]
 80027d8:	6063      	str	r3, [r4, #4]
 80027da:	6054      	str	r4, [r2, #4]
 80027dc:	e7cb      	b.n	8002776 <_free_r+0x22>
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	20000328 	.word	0x20000328

080027e4 <sbrk_aligned>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4e0e      	ldr	r6, [pc, #56]	; (8002820 <sbrk_aligned+0x3c>)
 80027e8:	460c      	mov	r4, r1
 80027ea:	6831      	ldr	r1, [r6, #0]
 80027ec:	4605      	mov	r5, r0
 80027ee:	b911      	cbnz	r1, 80027f6 <sbrk_aligned+0x12>
 80027f0:	f000 fbaa 	bl	8002f48 <_sbrk_r>
 80027f4:	6030      	str	r0, [r6, #0]
 80027f6:	4621      	mov	r1, r4
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 fba5 	bl	8002f48 <_sbrk_r>
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	d00a      	beq.n	8002818 <sbrk_aligned+0x34>
 8002802:	1cc4      	adds	r4, r0, #3
 8002804:	f024 0403 	bic.w	r4, r4, #3
 8002808:	42a0      	cmp	r0, r4
 800280a:	d007      	beq.n	800281c <sbrk_aligned+0x38>
 800280c:	1a21      	subs	r1, r4, r0
 800280e:	4628      	mov	r0, r5
 8002810:	f000 fb9a 	bl	8002f48 <_sbrk_r>
 8002814:	3001      	adds	r0, #1
 8002816:	d101      	bne.n	800281c <sbrk_aligned+0x38>
 8002818:	f04f 34ff 	mov.w	r4, #4294967295
 800281c:	4620      	mov	r0, r4
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	2000032c 	.word	0x2000032c

08002824 <_malloc_r>:
 8002824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002828:	1ccd      	adds	r5, r1, #3
 800282a:	f025 0503 	bic.w	r5, r5, #3
 800282e:	3508      	adds	r5, #8
 8002830:	2d0c      	cmp	r5, #12
 8002832:	bf38      	it	cc
 8002834:	250c      	movcc	r5, #12
 8002836:	2d00      	cmp	r5, #0
 8002838:	4607      	mov	r7, r0
 800283a:	db01      	blt.n	8002840 <_malloc_r+0x1c>
 800283c:	42a9      	cmp	r1, r5
 800283e:	d905      	bls.n	800284c <_malloc_r+0x28>
 8002840:	230c      	movs	r3, #12
 8002842:	2600      	movs	r6, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4630      	mov	r0, r6
 8002848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800284c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002920 <_malloc_r+0xfc>
 8002850:	f000 f868 	bl	8002924 <__malloc_lock>
 8002854:	f8d8 3000 	ldr.w	r3, [r8]
 8002858:	461c      	mov	r4, r3
 800285a:	bb5c      	cbnz	r4, 80028b4 <_malloc_r+0x90>
 800285c:	4629      	mov	r1, r5
 800285e:	4638      	mov	r0, r7
 8002860:	f7ff ffc0 	bl	80027e4 <sbrk_aligned>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	4604      	mov	r4, r0
 8002868:	d155      	bne.n	8002916 <_malloc_r+0xf2>
 800286a:	f8d8 4000 	ldr.w	r4, [r8]
 800286e:	4626      	mov	r6, r4
 8002870:	2e00      	cmp	r6, #0
 8002872:	d145      	bne.n	8002900 <_malloc_r+0xdc>
 8002874:	2c00      	cmp	r4, #0
 8002876:	d048      	beq.n	800290a <_malloc_r+0xe6>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	4631      	mov	r1, r6
 800287c:	4638      	mov	r0, r7
 800287e:	eb04 0903 	add.w	r9, r4, r3
 8002882:	f000 fb61 	bl	8002f48 <_sbrk_r>
 8002886:	4581      	cmp	r9, r0
 8002888:	d13f      	bne.n	800290a <_malloc_r+0xe6>
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	4638      	mov	r0, r7
 800288e:	1a6d      	subs	r5, r5, r1
 8002890:	4629      	mov	r1, r5
 8002892:	f7ff ffa7 	bl	80027e4 <sbrk_aligned>
 8002896:	3001      	adds	r0, #1
 8002898:	d037      	beq.n	800290a <_malloc_r+0xe6>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	442b      	add	r3, r5
 800289e:	6023      	str	r3, [r4, #0]
 80028a0:	f8d8 3000 	ldr.w	r3, [r8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d038      	beq.n	800291a <_malloc_r+0xf6>
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	42a2      	cmp	r2, r4
 80028ac:	d12b      	bne.n	8002906 <_malloc_r+0xe2>
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e00f      	b.n	80028d4 <_malloc_r+0xb0>
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	1b52      	subs	r2, r2, r5
 80028b8:	d41f      	bmi.n	80028fa <_malloc_r+0xd6>
 80028ba:	2a0b      	cmp	r2, #11
 80028bc:	d917      	bls.n	80028ee <_malloc_r+0xca>
 80028be:	1961      	adds	r1, r4, r5
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	6025      	str	r5, [r4, #0]
 80028c4:	bf18      	it	ne
 80028c6:	6059      	strne	r1, [r3, #4]
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	bf08      	it	eq
 80028cc:	f8c8 1000 	streq.w	r1, [r8]
 80028d0:	5162      	str	r2, [r4, r5]
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	4638      	mov	r0, r7
 80028d6:	f104 060b 	add.w	r6, r4, #11
 80028da:	f000 f829 	bl	8002930 <__malloc_unlock>
 80028de:	f026 0607 	bic.w	r6, r6, #7
 80028e2:	1d23      	adds	r3, r4, #4
 80028e4:	1af2      	subs	r2, r6, r3
 80028e6:	d0ae      	beq.n	8002846 <_malloc_r+0x22>
 80028e8:	1b9b      	subs	r3, r3, r6
 80028ea:	50a3      	str	r3, [r4, r2]
 80028ec:	e7ab      	b.n	8002846 <_malloc_r+0x22>
 80028ee:	42a3      	cmp	r3, r4
 80028f0:	6862      	ldr	r2, [r4, #4]
 80028f2:	d1dd      	bne.n	80028b0 <_malloc_r+0x8c>
 80028f4:	f8c8 2000 	str.w	r2, [r8]
 80028f8:	e7ec      	b.n	80028d4 <_malloc_r+0xb0>
 80028fa:	4623      	mov	r3, r4
 80028fc:	6864      	ldr	r4, [r4, #4]
 80028fe:	e7ac      	b.n	800285a <_malloc_r+0x36>
 8002900:	4634      	mov	r4, r6
 8002902:	6876      	ldr	r6, [r6, #4]
 8002904:	e7b4      	b.n	8002870 <_malloc_r+0x4c>
 8002906:	4613      	mov	r3, r2
 8002908:	e7cc      	b.n	80028a4 <_malloc_r+0x80>
 800290a:	230c      	movs	r3, #12
 800290c:	4638      	mov	r0, r7
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	f000 f80e 	bl	8002930 <__malloc_unlock>
 8002914:	e797      	b.n	8002846 <_malloc_r+0x22>
 8002916:	6025      	str	r5, [r4, #0]
 8002918:	e7dc      	b.n	80028d4 <_malloc_r+0xb0>
 800291a:	605b      	str	r3, [r3, #4]
 800291c:	deff      	udf	#255	; 0xff
 800291e:	bf00      	nop
 8002920:	20000328 	.word	0x20000328

08002924 <__malloc_lock>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__malloc_lock+0x8>)
 8002926:	f7ff bf13 	b.w	8002750 <__retarget_lock_acquire_recursive>
 800292a:	bf00      	nop
 800292c:	20000324 	.word	0x20000324

08002930 <__malloc_unlock>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__malloc_unlock+0x8>)
 8002932:	f7ff bf0e 	b.w	8002752 <__retarget_lock_release_recursive>
 8002936:	bf00      	nop
 8002938:	20000324 	.word	0x20000324

0800293c <__ssputs_r>:
 800293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002940:	461f      	mov	r7, r3
 8002942:	688e      	ldr	r6, [r1, #8]
 8002944:	4682      	mov	sl, r0
 8002946:	42be      	cmp	r6, r7
 8002948:	460c      	mov	r4, r1
 800294a:	4690      	mov	r8, r2
 800294c:	680b      	ldr	r3, [r1, #0]
 800294e:	d82c      	bhi.n	80029aa <__ssputs_r+0x6e>
 8002950:	898a      	ldrh	r2, [r1, #12]
 8002952:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002956:	d026      	beq.n	80029a6 <__ssputs_r+0x6a>
 8002958:	6965      	ldr	r5, [r4, #20]
 800295a:	6909      	ldr	r1, [r1, #16]
 800295c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002960:	eba3 0901 	sub.w	r9, r3, r1
 8002964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002968:	1c7b      	adds	r3, r7, #1
 800296a:	444b      	add	r3, r9
 800296c:	106d      	asrs	r5, r5, #1
 800296e:	429d      	cmp	r5, r3
 8002970:	bf38      	it	cc
 8002972:	461d      	movcc	r5, r3
 8002974:	0553      	lsls	r3, r2, #21
 8002976:	d527      	bpl.n	80029c8 <__ssputs_r+0x8c>
 8002978:	4629      	mov	r1, r5
 800297a:	f7ff ff53 	bl	8002824 <_malloc_r>
 800297e:	4606      	mov	r6, r0
 8002980:	b360      	cbz	r0, 80029dc <__ssputs_r+0xa0>
 8002982:	464a      	mov	r2, r9
 8002984:	6921      	ldr	r1, [r4, #16]
 8002986:	f000 fafd 	bl	8002f84 <memcpy>
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	81a3      	strh	r3, [r4, #12]
 8002996:	6126      	str	r6, [r4, #16]
 8002998:	444e      	add	r6, r9
 800299a:	6026      	str	r6, [r4, #0]
 800299c:	463e      	mov	r6, r7
 800299e:	6165      	str	r5, [r4, #20]
 80029a0:	eba5 0509 	sub.w	r5, r5, r9
 80029a4:	60a5      	str	r5, [r4, #8]
 80029a6:	42be      	cmp	r6, r7
 80029a8:	d900      	bls.n	80029ac <__ssputs_r+0x70>
 80029aa:	463e      	mov	r6, r7
 80029ac:	4632      	mov	r2, r6
 80029ae:	4641      	mov	r1, r8
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	f000 faaf 	bl	8002f14 <memmove>
 80029b6:	2000      	movs	r0, #0
 80029b8:	68a3      	ldr	r3, [r4, #8]
 80029ba:	1b9b      	subs	r3, r3, r6
 80029bc:	60a3      	str	r3, [r4, #8]
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	4433      	add	r3, r6
 80029c2:	6023      	str	r3, [r4, #0]
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c8:	462a      	mov	r2, r5
 80029ca:	f000 fae9 	bl	8002fa0 <_realloc_r>
 80029ce:	4606      	mov	r6, r0
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d1e0      	bne.n	8002996 <__ssputs_r+0x5a>
 80029d4:	4650      	mov	r0, sl
 80029d6:	6921      	ldr	r1, [r4, #16]
 80029d8:	f7ff febc 	bl	8002754 <_free_r>
 80029dc:	230c      	movs	r3, #12
 80029de:	f8ca 3000 	str.w	r3, [sl]
 80029e2:	89a3      	ldrh	r3, [r4, #12]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ec:	81a3      	strh	r3, [r4, #12]
 80029ee:	e7e9      	b.n	80029c4 <__ssputs_r+0x88>

080029f0 <_svfiprintf_r>:
 80029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f4:	4698      	mov	r8, r3
 80029f6:	898b      	ldrh	r3, [r1, #12]
 80029f8:	4607      	mov	r7, r0
 80029fa:	061b      	lsls	r3, r3, #24
 80029fc:	460d      	mov	r5, r1
 80029fe:	4614      	mov	r4, r2
 8002a00:	b09d      	sub	sp, #116	; 0x74
 8002a02:	d50e      	bpl.n	8002a22 <_svfiprintf_r+0x32>
 8002a04:	690b      	ldr	r3, [r1, #16]
 8002a06:	b963      	cbnz	r3, 8002a22 <_svfiprintf_r+0x32>
 8002a08:	2140      	movs	r1, #64	; 0x40
 8002a0a:	f7ff ff0b 	bl	8002824 <_malloc_r>
 8002a0e:	6028      	str	r0, [r5, #0]
 8002a10:	6128      	str	r0, [r5, #16]
 8002a12:	b920      	cbnz	r0, 8002a1e <_svfiprintf_r+0x2e>
 8002a14:	230c      	movs	r3, #12
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	e0d0      	b.n	8002bc0 <_svfiprintf_r+0x1d0>
 8002a1e:	2340      	movs	r3, #64	; 0x40
 8002a20:	616b      	str	r3, [r5, #20]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9309      	str	r3, [sp, #36]	; 0x24
 8002a26:	2320      	movs	r3, #32
 8002a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a2c:	2330      	movs	r3, #48	; 0x30
 8002a2e:	f04f 0901 	mov.w	r9, #1
 8002a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a36:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002bd8 <_svfiprintf_r+0x1e8>
 8002a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a3e:	4623      	mov	r3, r4
 8002a40:	469a      	mov	sl, r3
 8002a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a46:	b10a      	cbz	r2, 8002a4c <_svfiprintf_r+0x5c>
 8002a48:	2a25      	cmp	r2, #37	; 0x25
 8002a4a:	d1f9      	bne.n	8002a40 <_svfiprintf_r+0x50>
 8002a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a50:	d00b      	beq.n	8002a6a <_svfiprintf_r+0x7a>
 8002a52:	465b      	mov	r3, fp
 8002a54:	4622      	mov	r2, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	4638      	mov	r0, r7
 8002a5a:	f7ff ff6f 	bl	800293c <__ssputs_r>
 8002a5e:	3001      	adds	r0, #1
 8002a60:	f000 80a9 	beq.w	8002bb6 <_svfiprintf_r+0x1c6>
 8002a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a66:	445a      	add	r2, fp
 8002a68:	9209      	str	r2, [sp, #36]	; 0x24
 8002a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80a1 	beq.w	8002bb6 <_svfiprintf_r+0x1c6>
 8002a74:	2300      	movs	r3, #0
 8002a76:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a7e:	f10a 0a01 	add.w	sl, sl, #1
 8002a82:	9304      	str	r3, [sp, #16]
 8002a84:	9307      	str	r3, [sp, #28]
 8002a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8002a8c:	4654      	mov	r4, sl
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a94:	4850      	ldr	r0, [pc, #320]	; (8002bd8 <_svfiprintf_r+0x1e8>)
 8002a96:	f000 fa67 	bl	8002f68 <memchr>
 8002a9a:	9a04      	ldr	r2, [sp, #16]
 8002a9c:	b9d8      	cbnz	r0, 8002ad6 <_svfiprintf_r+0xe6>
 8002a9e:	06d0      	lsls	r0, r2, #27
 8002aa0:	bf44      	itt	mi
 8002aa2:	2320      	movmi	r3, #32
 8002aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002aa8:	0711      	lsls	r1, r2, #28
 8002aaa:	bf44      	itt	mi
 8002aac:	232b      	movmi	r3, #43	; 0x2b
 8002aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab8:	d015      	beq.n	8002ae6 <_svfiprintf_r+0xf6>
 8002aba:	4654      	mov	r4, sl
 8002abc:	2000      	movs	r0, #0
 8002abe:	f04f 0c0a 	mov.w	ip, #10
 8002ac2:	9a07      	ldr	r2, [sp, #28]
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aca:	3b30      	subs	r3, #48	; 0x30
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d94d      	bls.n	8002b6c <_svfiprintf_r+0x17c>
 8002ad0:	b1b0      	cbz	r0, 8002b00 <_svfiprintf_r+0x110>
 8002ad2:	9207      	str	r2, [sp, #28]
 8002ad4:	e014      	b.n	8002b00 <_svfiprintf_r+0x110>
 8002ad6:	eba0 0308 	sub.w	r3, r0, r8
 8002ada:	fa09 f303 	lsl.w	r3, r9, r3
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	46a2      	mov	sl, r4
 8002ae2:	9304      	str	r3, [sp, #16]
 8002ae4:	e7d2      	b.n	8002a8c <_svfiprintf_r+0x9c>
 8002ae6:	9b03      	ldr	r3, [sp, #12]
 8002ae8:	1d19      	adds	r1, r3, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	9103      	str	r1, [sp, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfbb      	ittet	lt
 8002af2:	425b      	neglt	r3, r3
 8002af4:	f042 0202 	orrlt.w	r2, r2, #2
 8002af8:	9307      	strge	r3, [sp, #28]
 8002afa:	9307      	strlt	r3, [sp, #28]
 8002afc:	bfb8      	it	lt
 8002afe:	9204      	strlt	r2, [sp, #16]
 8002b00:	7823      	ldrb	r3, [r4, #0]
 8002b02:	2b2e      	cmp	r3, #46	; 0x2e
 8002b04:	d10c      	bne.n	8002b20 <_svfiprintf_r+0x130>
 8002b06:	7863      	ldrb	r3, [r4, #1]
 8002b08:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0a:	d134      	bne.n	8002b76 <_svfiprintf_r+0x186>
 8002b0c:	9b03      	ldr	r3, [sp, #12]
 8002b0e:	3402      	adds	r4, #2
 8002b10:	1d1a      	adds	r2, r3, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	9203      	str	r2, [sp, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bfb8      	it	lt
 8002b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b1e:	9305      	str	r3, [sp, #20]
 8002b20:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002bdc <_svfiprintf_r+0x1ec>
 8002b24:	2203      	movs	r2, #3
 8002b26:	4650      	mov	r0, sl
 8002b28:	7821      	ldrb	r1, [r4, #0]
 8002b2a:	f000 fa1d 	bl	8002f68 <memchr>
 8002b2e:	b138      	cbz	r0, 8002b40 <_svfiprintf_r+0x150>
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	9b04      	ldr	r3, [sp, #16]
 8002b34:	eba0 000a 	sub.w	r0, r0, sl
 8002b38:	4082      	lsls	r2, r0
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	3401      	adds	r4, #1
 8002b3e:	9304      	str	r3, [sp, #16]
 8002b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b44:	2206      	movs	r2, #6
 8002b46:	4826      	ldr	r0, [pc, #152]	; (8002be0 <_svfiprintf_r+0x1f0>)
 8002b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b4c:	f000 fa0c 	bl	8002f68 <memchr>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d038      	beq.n	8002bc6 <_svfiprintf_r+0x1d6>
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <_svfiprintf_r+0x1f4>)
 8002b56:	bb1b      	cbnz	r3, 8002ba0 <_svfiprintf_r+0x1b0>
 8002b58:	9b03      	ldr	r3, [sp, #12]
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	f023 0307 	bic.w	r3, r3, #7
 8002b60:	3308      	adds	r3, #8
 8002b62:	9303      	str	r3, [sp, #12]
 8002b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b66:	4433      	add	r3, r6
 8002b68:	9309      	str	r3, [sp, #36]	; 0x24
 8002b6a:	e768      	b.n	8002a3e <_svfiprintf_r+0x4e>
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	2001      	movs	r0, #1
 8002b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b74:	e7a6      	b.n	8002ac4 <_svfiprintf_r+0xd4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	f04f 0c0a 	mov.w	ip, #10
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	3401      	adds	r4, #1
 8002b80:	9305      	str	r3, [sp, #20]
 8002b82:	4620      	mov	r0, r4
 8002b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b88:	3a30      	subs	r2, #48	; 0x30
 8002b8a:	2a09      	cmp	r2, #9
 8002b8c:	d903      	bls.n	8002b96 <_svfiprintf_r+0x1a6>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0c6      	beq.n	8002b20 <_svfiprintf_r+0x130>
 8002b92:	9105      	str	r1, [sp, #20]
 8002b94:	e7c4      	b.n	8002b20 <_svfiprintf_r+0x130>
 8002b96:	4604      	mov	r4, r0
 8002b98:	2301      	movs	r3, #1
 8002b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b9e:	e7f0      	b.n	8002b82 <_svfiprintf_r+0x192>
 8002ba0:	ab03      	add	r3, sp, #12
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	462a      	mov	r2, r5
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <_svfiprintf_r+0x1f8>)
 8002baa:	a904      	add	r1, sp, #16
 8002bac:	f3af 8000 	nop.w
 8002bb0:	1c42      	adds	r2, r0, #1
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	d1d6      	bne.n	8002b64 <_svfiprintf_r+0x174>
 8002bb6:	89ab      	ldrh	r3, [r5, #12]
 8002bb8:	065b      	lsls	r3, r3, #25
 8002bba:	f53f af2d 	bmi.w	8002a18 <_svfiprintf_r+0x28>
 8002bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bc0:	b01d      	add	sp, #116	; 0x74
 8002bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc6:	ab03      	add	r3, sp, #12
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	462a      	mov	r2, r5
 8002bcc:	4638      	mov	r0, r7
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <_svfiprintf_r+0x1f8>)
 8002bd0:	a904      	add	r1, sp, #16
 8002bd2:	f000 f87d 	bl	8002cd0 <_printf_i>
 8002bd6:	e7eb      	b.n	8002bb0 <_svfiprintf_r+0x1c0>
 8002bd8:	08003092 	.word	0x08003092
 8002bdc:	08003098 	.word	0x08003098
 8002be0:	0800309c 	.word	0x0800309c
 8002be4:	00000000 	.word	0x00000000
 8002be8:	0800293d 	.word	0x0800293d

08002bec <_printf_common>:
 8002bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf0:	4616      	mov	r6, r2
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	688a      	ldr	r2, [r1, #8]
 8002bf6:	690b      	ldr	r3, [r1, #16]
 8002bf8:	4607      	mov	r7, r0
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	bfb8      	it	lt
 8002bfe:	4613      	movlt	r3, r2
 8002c00:	6033      	str	r3, [r6, #0]
 8002c02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c06:	460c      	mov	r4, r1
 8002c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c0c:	b10a      	cbz	r2, 8002c12 <_printf_common+0x26>
 8002c0e:	3301      	adds	r3, #1
 8002c10:	6033      	str	r3, [r6, #0]
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	0699      	lsls	r1, r3, #26
 8002c16:	bf42      	ittt	mi
 8002c18:	6833      	ldrmi	r3, [r6, #0]
 8002c1a:	3302      	addmi	r3, #2
 8002c1c:	6033      	strmi	r3, [r6, #0]
 8002c1e:	6825      	ldr	r5, [r4, #0]
 8002c20:	f015 0506 	ands.w	r5, r5, #6
 8002c24:	d106      	bne.n	8002c34 <_printf_common+0x48>
 8002c26:	f104 0a19 	add.w	sl, r4, #25
 8002c2a:	68e3      	ldr	r3, [r4, #12]
 8002c2c:	6832      	ldr	r2, [r6, #0]
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	42ab      	cmp	r3, r5
 8002c32:	dc2b      	bgt.n	8002c8c <_printf_common+0xa0>
 8002c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c38:	1e13      	subs	r3, r2, #0
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	bf18      	it	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	0692      	lsls	r2, r2, #26
 8002c42:	d430      	bmi.n	8002ca6 <_printf_common+0xba>
 8002c44:	4649      	mov	r1, r9
 8002c46:	4638      	mov	r0, r7
 8002c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c4c:	47c0      	blx	r8
 8002c4e:	3001      	adds	r0, #1
 8002c50:	d023      	beq.n	8002c9a <_printf_common+0xae>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	6922      	ldr	r2, [r4, #16]
 8002c56:	f003 0306 	and.w	r3, r3, #6
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf14      	ite	ne
 8002c5e:	2500      	movne	r5, #0
 8002c60:	6833      	ldreq	r3, [r6, #0]
 8002c62:	f04f 0600 	mov.w	r6, #0
 8002c66:	bf08      	it	eq
 8002c68:	68e5      	ldreq	r5, [r4, #12]
 8002c6a:	f104 041a 	add.w	r4, r4, #26
 8002c6e:	bf08      	it	eq
 8002c70:	1aed      	subeq	r5, r5, r3
 8002c72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c76:	bf08      	it	eq
 8002c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bfc4      	itt	gt
 8002c80:	1a9b      	subgt	r3, r3, r2
 8002c82:	18ed      	addgt	r5, r5, r3
 8002c84:	42b5      	cmp	r5, r6
 8002c86:	d11a      	bne.n	8002cbe <_printf_common+0xd2>
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e008      	b.n	8002c9e <_printf_common+0xb2>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4652      	mov	r2, sl
 8002c90:	4649      	mov	r1, r9
 8002c92:	4638      	mov	r0, r7
 8002c94:	47c0      	blx	r8
 8002c96:	3001      	adds	r0, #1
 8002c98:	d103      	bne.n	8002ca2 <_printf_common+0xb6>
 8002c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca2:	3501      	adds	r5, #1
 8002ca4:	e7c1      	b.n	8002c2a <_printf_common+0x3e>
 8002ca6:	2030      	movs	r0, #48	; 0x30
 8002ca8:	18e1      	adds	r1, r4, r3
 8002caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cb4:	4422      	add	r2, r4
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cbc:	e7c2      	b.n	8002c44 <_printf_common+0x58>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	47c0      	blx	r8
 8002cc8:	3001      	adds	r0, #1
 8002cca:	d0e6      	beq.n	8002c9a <_printf_common+0xae>
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7d9      	b.n	8002c84 <_printf_common+0x98>

08002cd0 <_printf_i>:
 8002cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd4:	7e0f      	ldrb	r7, [r1, #24]
 8002cd6:	4691      	mov	r9, r2
 8002cd8:	2f78      	cmp	r7, #120	; 0x78
 8002cda:	4680      	mov	r8, r0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	469a      	mov	sl, r3
 8002ce0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ce6:	d807      	bhi.n	8002cf8 <_printf_i+0x28>
 8002ce8:	2f62      	cmp	r7, #98	; 0x62
 8002cea:	d80a      	bhi.n	8002d02 <_printf_i+0x32>
 8002cec:	2f00      	cmp	r7, #0
 8002cee:	f000 80d5 	beq.w	8002e9c <_printf_i+0x1cc>
 8002cf2:	2f58      	cmp	r7, #88	; 0x58
 8002cf4:	f000 80c1 	beq.w	8002e7a <_printf_i+0x1aa>
 8002cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d00:	e03a      	b.n	8002d78 <_printf_i+0xa8>
 8002d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d06:	2b15      	cmp	r3, #21
 8002d08:	d8f6      	bhi.n	8002cf8 <_printf_i+0x28>
 8002d0a:	a101      	add	r1, pc, #4	; (adr r1, 8002d10 <_printf_i+0x40>)
 8002d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d7d 	.word	0x08002d7d
 8002d18:	08002cf9 	.word	0x08002cf9
 8002d1c:	08002cf9 	.word	0x08002cf9
 8002d20:	08002cf9 	.word	0x08002cf9
 8002d24:	08002cf9 	.word	0x08002cf9
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002cf9 	.word	0x08002cf9
 8002d30:	08002cf9 	.word	0x08002cf9
 8002d34:	08002cf9 	.word	0x08002cf9
 8002d38:	08002cf9 	.word	0x08002cf9
 8002d3c:	08002e83 	.word	0x08002e83
 8002d40:	08002da9 	.word	0x08002da9
 8002d44:	08002e3d 	.word	0x08002e3d
 8002d48:	08002cf9 	.word	0x08002cf9
 8002d4c:	08002cf9 	.word	0x08002cf9
 8002d50:	08002ea5 	.word	0x08002ea5
 8002d54:	08002cf9 	.word	0x08002cf9
 8002d58:	08002da9 	.word	0x08002da9
 8002d5c:	08002cf9 	.word	0x08002cf9
 8002d60:	08002cf9 	.word	0x08002cf9
 8002d64:	08002e45 	.word	0x08002e45
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	602a      	str	r2, [r5, #0]
 8002d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0a0      	b.n	8002ebe <_printf_i+0x1ee>
 8002d7c:	6820      	ldr	r0, [r4, #0]
 8002d7e:	682b      	ldr	r3, [r5, #0]
 8002d80:	0607      	lsls	r7, r0, #24
 8002d82:	f103 0104 	add.w	r1, r3, #4
 8002d86:	6029      	str	r1, [r5, #0]
 8002d88:	d501      	bpl.n	8002d8e <_printf_i+0xbe>
 8002d8a:	681e      	ldr	r6, [r3, #0]
 8002d8c:	e003      	b.n	8002d96 <_printf_i+0xc6>
 8002d8e:	0646      	lsls	r6, r0, #25
 8002d90:	d5fb      	bpl.n	8002d8a <_printf_i+0xba>
 8002d92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d96:	2e00      	cmp	r6, #0
 8002d98:	da03      	bge.n	8002da2 <_printf_i+0xd2>
 8002d9a:	232d      	movs	r3, #45	; 0x2d
 8002d9c:	4276      	negs	r6, r6
 8002d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002da2:	230a      	movs	r3, #10
 8002da4:	4859      	ldr	r0, [pc, #356]	; (8002f0c <_printf_i+0x23c>)
 8002da6:	e012      	b.n	8002dce <_printf_i+0xfe>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	6820      	ldr	r0, [r4, #0]
 8002dac:	1d19      	adds	r1, r3, #4
 8002dae:	6029      	str	r1, [r5, #0]
 8002db0:	0605      	lsls	r5, r0, #24
 8002db2:	d501      	bpl.n	8002db8 <_printf_i+0xe8>
 8002db4:	681e      	ldr	r6, [r3, #0]
 8002db6:	e002      	b.n	8002dbe <_printf_i+0xee>
 8002db8:	0641      	lsls	r1, r0, #25
 8002dba:	d5fb      	bpl.n	8002db4 <_printf_i+0xe4>
 8002dbc:	881e      	ldrh	r6, [r3, #0]
 8002dbe:	2f6f      	cmp	r7, #111	; 0x6f
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2308      	moveq	r3, #8
 8002dc4:	230a      	movne	r3, #10
 8002dc6:	4851      	ldr	r0, [pc, #324]	; (8002f0c <_printf_i+0x23c>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dce:	6865      	ldr	r5, [r4, #4]
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	bfa8      	it	ge
 8002dd4:	6821      	ldrge	r1, [r4, #0]
 8002dd6:	60a5      	str	r5, [r4, #8]
 8002dd8:	bfa4      	itt	ge
 8002dda:	f021 0104 	bicge.w	r1, r1, #4
 8002dde:	6021      	strge	r1, [r4, #0]
 8002de0:	b90e      	cbnz	r6, 8002de6 <_printf_i+0x116>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d04b      	beq.n	8002e7e <_printf_i+0x1ae>
 8002de6:	4615      	mov	r5, r2
 8002de8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dec:	fb03 6711 	mls	r7, r3, r1, r6
 8002df0:	5dc7      	ldrb	r7, [r0, r7]
 8002df2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002df6:	4637      	mov	r7, r6
 8002df8:	42bb      	cmp	r3, r7
 8002dfa:	460e      	mov	r6, r1
 8002dfc:	d9f4      	bls.n	8002de8 <_printf_i+0x118>
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d10b      	bne.n	8002e1a <_printf_i+0x14a>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	07de      	lsls	r6, r3, #31
 8002e06:	d508      	bpl.n	8002e1a <_printf_i+0x14a>
 8002e08:	6923      	ldr	r3, [r4, #16]
 8002e0a:	6861      	ldr	r1, [r4, #4]
 8002e0c:	4299      	cmp	r1, r3
 8002e0e:	bfde      	ittt	le
 8002e10:	2330      	movle	r3, #48	; 0x30
 8002e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e1a:	1b52      	subs	r2, r2, r5
 8002e1c:	6122      	str	r2, [r4, #16]
 8002e1e:	464b      	mov	r3, r9
 8002e20:	4621      	mov	r1, r4
 8002e22:	4640      	mov	r0, r8
 8002e24:	f8cd a000 	str.w	sl, [sp]
 8002e28:	aa03      	add	r2, sp, #12
 8002e2a:	f7ff fedf 	bl	8002bec <_printf_common>
 8002e2e:	3001      	adds	r0, #1
 8002e30:	d14a      	bne.n	8002ec8 <_printf_i+0x1f8>
 8002e32:	f04f 30ff 	mov.w	r0, #4294967295
 8002e36:	b004      	add	sp, #16
 8002e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	6023      	str	r3, [r4, #0]
 8002e44:	2778      	movs	r7, #120	; 0x78
 8002e46:	4832      	ldr	r0, [pc, #200]	; (8002f10 <_printf_i+0x240>)
 8002e48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	6829      	ldr	r1, [r5, #0]
 8002e50:	061f      	lsls	r7, r3, #24
 8002e52:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e56:	d402      	bmi.n	8002e5e <_printf_i+0x18e>
 8002e58:	065f      	lsls	r7, r3, #25
 8002e5a:	bf48      	it	mi
 8002e5c:	b2b6      	uxthmi	r6, r6
 8002e5e:	07df      	lsls	r7, r3, #31
 8002e60:	bf48      	it	mi
 8002e62:	f043 0320 	orrmi.w	r3, r3, #32
 8002e66:	6029      	str	r1, [r5, #0]
 8002e68:	bf48      	it	mi
 8002e6a:	6023      	strmi	r3, [r4, #0]
 8002e6c:	b91e      	cbnz	r6, 8002e76 <_printf_i+0x1a6>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	f023 0320 	bic.w	r3, r3, #32
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	2310      	movs	r3, #16
 8002e78:	e7a6      	b.n	8002dc8 <_printf_i+0xf8>
 8002e7a:	4824      	ldr	r0, [pc, #144]	; (8002f0c <_printf_i+0x23c>)
 8002e7c:	e7e4      	b.n	8002e48 <_printf_i+0x178>
 8002e7e:	4615      	mov	r5, r2
 8002e80:	e7bd      	b.n	8002dfe <_printf_i+0x12e>
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	6826      	ldr	r6, [r4, #0]
 8002e86:	1d18      	adds	r0, r3, #4
 8002e88:	6961      	ldr	r1, [r4, #20]
 8002e8a:	6028      	str	r0, [r5, #0]
 8002e8c:	0635      	lsls	r5, r6, #24
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	d501      	bpl.n	8002e96 <_printf_i+0x1c6>
 8002e92:	6019      	str	r1, [r3, #0]
 8002e94:	e002      	b.n	8002e9c <_printf_i+0x1cc>
 8002e96:	0670      	lsls	r0, r6, #25
 8002e98:	d5fb      	bpl.n	8002e92 <_printf_i+0x1c2>
 8002e9a:	8019      	strh	r1, [r3, #0]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	4615      	mov	r5, r2
 8002ea0:	6123      	str	r3, [r4, #16]
 8002ea2:	e7bc      	b.n	8002e1e <_printf_i+0x14e>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	1d1a      	adds	r2, r3, #4
 8002eaa:	602a      	str	r2, [r5, #0]
 8002eac:	681d      	ldr	r5, [r3, #0]
 8002eae:	6862      	ldr	r2, [r4, #4]
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 f859 	bl	8002f68 <memchr>
 8002eb6:	b108      	cbz	r0, 8002ebc <_printf_i+0x1ec>
 8002eb8:	1b40      	subs	r0, r0, r5
 8002eba:	6060      	str	r0, [r4, #4]
 8002ebc:	6863      	ldr	r3, [r4, #4]
 8002ebe:	6123      	str	r3, [r4, #16]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec6:	e7aa      	b.n	8002e1e <_printf_i+0x14e>
 8002ec8:	462a      	mov	r2, r5
 8002eca:	4649      	mov	r1, r9
 8002ecc:	4640      	mov	r0, r8
 8002ece:	6923      	ldr	r3, [r4, #16]
 8002ed0:	47d0      	blx	sl
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d0ad      	beq.n	8002e32 <_printf_i+0x162>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	079b      	lsls	r3, r3, #30
 8002eda:	d413      	bmi.n	8002f04 <_printf_i+0x234>
 8002edc:	68e0      	ldr	r0, [r4, #12]
 8002ede:	9b03      	ldr	r3, [sp, #12]
 8002ee0:	4298      	cmp	r0, r3
 8002ee2:	bfb8      	it	lt
 8002ee4:	4618      	movlt	r0, r3
 8002ee6:	e7a6      	b.n	8002e36 <_printf_i+0x166>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	4632      	mov	r2, r6
 8002eec:	4649      	mov	r1, r9
 8002eee:	4640      	mov	r0, r8
 8002ef0:	47d0      	blx	sl
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d09d      	beq.n	8002e32 <_printf_i+0x162>
 8002ef6:	3501      	adds	r5, #1
 8002ef8:	68e3      	ldr	r3, [r4, #12]
 8002efa:	9903      	ldr	r1, [sp, #12]
 8002efc:	1a5b      	subs	r3, r3, r1
 8002efe:	42ab      	cmp	r3, r5
 8002f00:	dcf2      	bgt.n	8002ee8 <_printf_i+0x218>
 8002f02:	e7eb      	b.n	8002edc <_printf_i+0x20c>
 8002f04:	2500      	movs	r5, #0
 8002f06:	f104 0619 	add.w	r6, r4, #25
 8002f0a:	e7f5      	b.n	8002ef8 <_printf_i+0x228>
 8002f0c:	080030a3 	.word	0x080030a3
 8002f10:	080030b4 	.word	0x080030b4

08002f14 <memmove>:
 8002f14:	4288      	cmp	r0, r1
 8002f16:	b510      	push	{r4, lr}
 8002f18:	eb01 0402 	add.w	r4, r1, r2
 8002f1c:	d902      	bls.n	8002f24 <memmove+0x10>
 8002f1e:	4284      	cmp	r4, r0
 8002f20:	4623      	mov	r3, r4
 8002f22:	d807      	bhi.n	8002f34 <memmove+0x20>
 8002f24:	1e43      	subs	r3, r0, #1
 8002f26:	42a1      	cmp	r1, r4
 8002f28:	d008      	beq.n	8002f3c <memmove+0x28>
 8002f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f32:	e7f8      	b.n	8002f26 <memmove+0x12>
 8002f34:	4601      	mov	r1, r0
 8002f36:	4402      	add	r2, r0
 8002f38:	428a      	cmp	r2, r1
 8002f3a:	d100      	bne.n	8002f3e <memmove+0x2a>
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f46:	e7f7      	b.n	8002f38 <memmove+0x24>

08002f48 <_sbrk_r>:
 8002f48:	b538      	push	{r3, r4, r5, lr}
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	4d05      	ldr	r5, [pc, #20]	; (8002f64 <_sbrk_r+0x1c>)
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	f7fd fdd2 	bl	8000afc <_sbrk>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d102      	bne.n	8002f62 <_sbrk_r+0x1a>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	b103      	cbz	r3, 8002f62 <_sbrk_r+0x1a>
 8002f60:	6023      	str	r3, [r4, #0]
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	20000320 	.word	0x20000320

08002f68 <memchr>:
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	b2c9      	uxtb	r1, r1
 8002f6e:	4402      	add	r2, r0
 8002f70:	4293      	cmp	r3, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	d101      	bne.n	8002f7a <memchr+0x12>
 8002f76:	2000      	movs	r0, #0
 8002f78:	e003      	b.n	8002f82 <memchr+0x1a>
 8002f7a:	7804      	ldrb	r4, [r0, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	428c      	cmp	r4, r1
 8002f80:	d1f6      	bne.n	8002f70 <memchr+0x8>
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <memcpy>:
 8002f84:	440a      	add	r2, r1
 8002f86:	4291      	cmp	r1, r2
 8002f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f8c:	d100      	bne.n	8002f90 <memcpy+0xc>
 8002f8e:	4770      	bx	lr
 8002f90:	b510      	push	{r4, lr}
 8002f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f96:	4291      	cmp	r1, r2
 8002f98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f9c:	d1f9      	bne.n	8002f92 <memcpy+0xe>
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <_realloc_r>:
 8002fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa4:	4680      	mov	r8, r0
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	460e      	mov	r6, r1
 8002faa:	b921      	cbnz	r1, 8002fb6 <_realloc_r+0x16>
 8002fac:	4611      	mov	r1, r2
 8002fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb2:	f7ff bc37 	b.w	8002824 <_malloc_r>
 8002fb6:	b92a      	cbnz	r2, 8002fc4 <_realloc_r+0x24>
 8002fb8:	f7ff fbcc 	bl	8002754 <_free_r>
 8002fbc:	4625      	mov	r5, r4
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc4:	f000 f81b 	bl	8002ffe <_malloc_usable_size_r>
 8002fc8:	4284      	cmp	r4, r0
 8002fca:	4607      	mov	r7, r0
 8002fcc:	d802      	bhi.n	8002fd4 <_realloc_r+0x34>
 8002fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fd2:	d812      	bhi.n	8002ffa <_realloc_r+0x5a>
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	f7ff fc24 	bl	8002824 <_malloc_r>
 8002fdc:	4605      	mov	r5, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d0ed      	beq.n	8002fbe <_realloc_r+0x1e>
 8002fe2:	42bc      	cmp	r4, r7
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	bf28      	it	cs
 8002fea:	463a      	movcs	r2, r7
 8002fec:	f7ff ffca 	bl	8002f84 <memcpy>
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	f7ff fbae 	bl	8002754 <_free_r>
 8002ff8:	e7e1      	b.n	8002fbe <_realloc_r+0x1e>
 8002ffa:	4635      	mov	r5, r6
 8002ffc:	e7df      	b.n	8002fbe <_realloc_r+0x1e>

08002ffe <_malloc_usable_size_r>:
 8002ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003002:	1f18      	subs	r0, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	bfbc      	itt	lt
 8003008:	580b      	ldrlt	r3, [r1, r0]
 800300a:	18c0      	addlt	r0, r0, r3
 800300c:	4770      	bx	lr
	...

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
